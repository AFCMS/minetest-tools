[{"desc":"","kind":5,"prefix":"minetest.features","body":"minetest.features"},{"desc":"  main config file (`minetest.conf`).","kind":5,"prefix":"minetest.settings","body":"minetest.settings"},{"desc":"    * Map of registered items, indexed by name","kind":5,"prefix":"minetest.registered_items","body":"minetest.registered_items"},{"desc":"    * Map of registered node definitions, indexed by name","kind":5,"prefix":"minetest.registered_nodes","body":"minetest.registered_nodes"},{"desc":"    * Map of registered craft item definitions, indexed by name","kind":5,"prefix":"minetest.registered_craftitems","body":"minetest.registered_craftitems"},{"desc":"    * Map of registered tool definitions, indexed by name","kind":5,"prefix":"minetest.registered_tools","body":"minetest.registered_tools"},{"desc":"    * Map of registered entity prototypes, indexed by name","kind":5,"prefix":"minetest.registered_entities","body":"minetest.registered_entities"},{"desc":"    * Map of object references, indexed by active object id","kind":5,"prefix":"minetest.object_refs","body":"minetest.object_refs"},{"desc":"    * Map of Lua entities, indexed by active object id","kind":5,"prefix":"minetest.luaentities","body":"minetest.luaentities"},{"desc":"    * List of ABM definitions","kind":5,"prefix":"minetest.registered_abms","body":"minetest.registered_abms"},{"desc":"    * List of LBM definitions","kind":5,"prefix":"minetest.registered_lbms","body":"minetest.registered_lbms"},{"desc":"    * Map of registered aliases, indexed by name","kind":5,"prefix":"minetest.registered_aliases","body":"minetest.registered_aliases"},{"desc":"    * Map of registered ore definitions, indexed by the `name` field.","kind":5,"prefix":"minetest.registered_ores","body":"minetest.registered_ores"},{"desc":"    * Map of registered biome definitions, indexed by the `name` field.","kind":5,"prefix":"minetest.registered_biomes","body":"minetest.registered_biomes"},{"desc":"    * Map of registered decoration definitions, indexed by the `name` field.","kind":5,"prefix":"minetest.registered_decorations","body":"minetest.registered_decorations"},{"desc":"    * Map of registered schematic definitions, indexed by the `name` field.","kind":5,"prefix":"minetest.registered_schematics","body":"minetest.registered_schematics"},{"desc":"    * Map of registered chat command definitions, indexed by name","kind":5,"prefix":"minetest.registered_chatcommands","body":"minetest.registered_chatcommands"},{"desc":"    * Map of registered privilege definitions, indexed by name","kind":5,"prefix":"minetest.registered_privileges","body":"minetest.registered_privileges"},{"desc":"* Set the formspec version to a certain number. If not specified,","kind":13,"prefix":"formspec_version","body":"formspec_version[${1:version}]"},{"desc":"* Define the size of the menu in inventory slots\n* `fixed_size`: `true`/`false` (optional)\n* deprecated: `invsize[<W>,<H>;]`","kind":13,"prefix":"size","body":"size[${1:W},${2:H},${3:fixed_size}]"},{"desc":"* Must be used after `size` element.\n* Defines the position on the game window of the formspec's `anchor` point.\n* For X and Y, 0.0 and 1.0 represent opposite edges of the game window,","kind":13,"prefix":"position","body":"position[${1:X},${2:Y}]"},{"desc":"* Must be used after both `size` and `position` (if present) elements.\n* Defines the location of the anchor point within the formspec.\n* For X and Y, 0.0 and 1.0 represent opposite edges of the formspec,","kind":13,"prefix":"anchor","body":"anchor[${1:X},${2:Y}]"},{"desc":"* Must be used after the `size`, `position`, and `anchor` elements (if present).\n* Disables player:set_formspec_prepend() from applying to this formspec.","kind":13,"prefix":"no_prepend","body":"no_prepend[]"},{"desc":"* INFORMATION: Enable it automatically using `formspec_version` version 2 or newer.\n* When set to true, all following formspec elements will use the new coordinate system.\n* If used immediately after `size`, `position`, `anchor`, and `no_prepend` elements","kind":13,"prefix":"real_coordinates","body":"real_coordinates[${1:bool}]"},{"desc":"* Start of a container block, moves all physical elements in the container by","kind":13,"prefix":"container","body":"container[${1:X},${2:Y}]"},{"desc":"* End of a container, following elements are no longer relative to this","kind":13,"prefix":"container_end","body":"container_end[]"},{"desc":"* Show an inventory list if it has been sent to the client. Nothing will","kind":13,"prefix":"list","body":"list[${1:inventory location};${2:list name};${3:X},${4:Y};${5:W},${6:H};]"},{"desc":"* Show an inventory list if it has been sent to the client. Nothing will","kind":13,"prefix":"list","body":"list[${1:inventory location};${2:list name};${3:X},${4:Y};${5:W},${6:H};${7:starting item index}]"},{"desc":"* Allows to create a ring of inventory lists\n* Shift-clicking on items in one element of the ring","kind":13,"prefix":"listring","body":"listring[${1:inventory location};${2:list name}]"},{"desc":"* Shorthand for doing `listring[<inventory location>;<list name>]`","kind":13,"prefix":"listring","body":"listring[]"},{"desc":"* Sets background color of slots as `ColorString`\n* Sets background color of slots on mouse hovering","kind":13,"prefix":"listcolors","body":"listcolors[${1:slot_bg_normal};${2:slot_bg_hover}]"},{"desc":"* Sets background color of slots as `ColorString`\n* Sets background color of slots on mouse hovering\n* Sets color of slots border","kind":13,"prefix":"listcolors","body":"listcolors[${1:slot_bg_normal};${2:slot_bg_hover};${3:slot_border}]"},{"desc":"* Sets background color of slots as `ColorString`\n* Sets background color of slots on mouse hovering\n* Sets color of slots border\n* Sets default background color of tooltips\n* Sets default font color of tooltips","kind":13,"prefix":"listcolors","body":"listcolors[${1:slot_bg_normal};${2:slot_bg_hover};${3:slot_border};${4:tooltip_bgcolor};${5:tooltip_fontcolor}]"},{"desc":"* Adds tooltip for an element\n* `<bgcolor>` tooltip background color as `ColorString` (optional)\n* `<fontcolor>` tooltip font color as `ColorString` (optional)","kind":13,"prefix":"tooltip","body":"tooltip[${1:gui_element_name};${2:tooltip_text};${3:bgcolor};${4:fontcolor}]"},{"desc":"* Adds tooltip for an area. Other tooltips will take priority when present.\n* `<bgcolor>` tooltip background color as `ColorString` (optional)\n* `<fontcolor>` tooltip font color as `ColorString` (optional)","kind":13,"prefix":"tooltip","body":"tooltip[${1:X},${2:Y};${3:W},${4:H};${5:tooltip_text};${6:bgcolor};${7:fontcolor}]"},{"desc":"* Show an image","kind":13,"prefix":"image","body":"image[${1:X},${2:Y};${3:W},${4:H};${5:texture name}]"},{"desc":"* Show an inventory image of registered item/node","kind":13,"prefix":"item_image","body":"item_image[${1:X},${2:Y};${3:W},${4:H};${5:item name}]"},{"desc":"* Sets background color of formspec as `ColorString`\n* If `true`, a fullscreen background is drawn and the color is ignored","kind":13,"prefix":"bgcolor","body":"bgcolor[${1:color};${2:fullscreen}]"},{"desc":"* Example for formspec 8x4 in 16x resolution: image shall be sized","kind":13,"prefix":"background","body":"background[${1:X},${2:Y};${3:W},${4:H};${5:texture name}]"},{"desc":"* Example for formspec 8x4 in 16x resolution:","kind":13,"prefix":"background","body":"background[${1:X},${2:Y};${3:W},${4:H};${5:texture name};${6:auto_clip}]"},{"desc":"* 9-sliced background. See https://en.wikipedia.org/wiki/9-slice_scaling\n* Middle is a rect which defines the middle of the 9-slice.","kind":13,"prefix":"background9","body":"background9[${1:X},${2:Y};${3:W},${4:H};${5:texture name};${6:auto_clip};${7:middle}]"},{"desc":"* Textual password style field; will be sent to server when a button is clicked\n* When enter is pressed in field, fields.key_enter_field will be sent with the","kind":13,"prefix":"pwdfield","body":"pwdfield[${1:X},${2:Y};${3:W},${4:H};${5:name};${6:label}]"},{"desc":"* Textual field; will be sent to server when a button is clicked\n* When enter is pressed in field, `fields.key_enter_field` will be sent with","kind":13,"prefix":"field","body":"field[${1:X},${2:Y};${3:W},${4:H};${5:name};${6:label};${7:default}]"},{"desc":"* As above, but without position/size units\n* When enter is pressed in field, `fields.key_enter_field` will be sent with","kind":13,"prefix":"field","body":"field[${1:name};${2:label};${3:default}]"},{"desc":"* <name> is the name of the field\n* if <close_on_enter> is false, pressing enter in the field will submit the","kind":13,"prefix":"field_close_on_enter","body":"field_close_on_enter[${1:name};${2:close_on_enter}]"},{"desc":"* Same as fields above, but with multi-line input\n* If the text overflows, a vertical scrollbar is added.\n* If the name is empty, the textarea is read-only and","kind":13,"prefix":"textarea","body":"textarea[${1:X},${2:Y};${3:W},${4:H};${5:name};${6:label};${7:default}]"},{"desc":"* The label formspec element displays the text set in `label`","kind":13,"prefix":"label","body":"label[${1:X},${2:Y};${3:label}]"},{"desc":"* Textual label drawn vertically\n* `label` is the text on the label\n* **Note**: If the new coordinate system is enabled, vertlabels are","kind":13,"prefix":"vertlabel","body":"vertlabel[${1:X},${2:Y};${3:label}]"},{"desc":"* Clickable button. When clicked, fields will be sent.\n* With the old coordinate system, buttons are a set height, but will be vertically","kind":13,"prefix":"button","body":"button[${1:X},${2:Y};${3:W},${4:H};${5:name};${6:label}]"},{"desc":"* `texture name` is the filename of an image\n* **Note**: Height is supported on both the old and new coordinate systems","kind":13,"prefix":"image_button","body":"image_button[${1:X},${2:Y};${3:W},${4:H};${5:texture name};${6:name};${7:label}]"},{"desc":"* `texture name` is the filename of an image\n* `noclip=true` means the image button doesn't need to be within specified","kind":13,"prefix":"image_button","body":"image_button[${1:X},${2:Y};${3:W},${4:H};${5:texture name};${6:name};${7:label};${8:noclip};${9:drawborder};${10:pressed texture name}]"},{"desc":"* `item name` is the registered name of an item/node\n* The item description will be used as the tooltip. This can be overridden with","kind":13,"prefix":"item_image_button","body":"item_image_button[${1:X},${2:Y};${3:W},${4:H};${5:item name};${6:name};${7:label}]"},{"desc":"* When clicked, fields will be sent and the form will quit.\n* Same as `button` in all other respects.","kind":13,"prefix":"button_exit","body":"button_exit[${1:X},${2:Y};${3:W},${4:H};${5:name};${6:label}]"},{"desc":"* When clicked, fields will be sent and the form will quit.\n* Same as `image_button` in all other respects.","kind":13,"prefix":"image_button_exit","body":"image_button_exit[${1:X},${2:Y};${3:W},${4:H};${5:texture name};${6:name};${7:label}]"},{"desc":"* Scrollable item list showing arbitrary text elements\n* `name` fieldname sent to server on doubleclick value is current selected","kind":13,"prefix":"textlist","body":"textlist[${1:X},${2:Y};${3:W},${4:H};${5:name};${6:listelem 1},${7:listelem 2},...,${8:listelem n}]"},{"desc":"* Scrollable itemlist showing arbitrary text elements\n* `name` fieldname sent to server on doubleclick value is current selected","kind":13,"prefix":"textlist","body":"textlist[${1:X},${2:Y};${3:W},${4:H};${5:name};${6:listelem 1},${7:listelem 2},...,${8:listelem n};${9:selected idx};${10:transparent}]"},{"desc":"* Show a tab**header** at specific position (ignores formsize)\n* `X` and `Y`: position of the tabheader\n* *Note*: Width and height are automatically chosen with this syntax\n* `name` fieldname data is transferred to Lua\n* `caption 1`...: name shown on top of tab\n* `current_tab`: index of selected tab 1...\n* `transparent` (optional): show transparent\n* `draw_border` (optional): draw border","kind":13,"prefix":"tabheader","body":"tabheader[${1:X},${2:Y};${3:name};${4:caption 1},${5:caption 2},...,${6:caption n};${7:current_tab};${8:transparent};${9:draw_border}]"},{"desc":"* Show a tab**header** at specific position (ignores formsize)\n* **Important note**: This syntax for tabheaders can only be used with the","kind":13,"prefix":"tabheader","body":"tabheader[${1:X},${2:Y};${3:H};${4:name};${5:caption 1},${6:caption 2},...,${7:caption n};${8:current_tab};${9:transparent};${10:draw_border}]"},{"desc":"* Show a tab**header** at specific position (ignores formsize)\n* **Important note**: This syntax for tabheaders can only be used with the","kind":13,"prefix":"tabheader","body":"tabheader[${1:X},${2:Y};${3:W},${4:H};${5:name};${6:caption 1},${7:caption 2},...,${8:caption n};${9:current_tab};${10:transparent};${11:draw_border}]"},{"desc":"* Simple colored box\n* `color` is color specified as a `ColorString`.","kind":13,"prefix":"box","body":"box[${1:X},${2:Y};${3:W},${4:H};${5:color}]"},{"desc":"* Show a dropdown field\n* **Important note**: There are two different operation modes:","kind":13,"prefix":"dropdown","body":"dropdown[${1:X},${2:Y};${3:W};${4:name};${5:item 1},${6:item 2}, ...,${7:item n};${8:selected idx}]"},{"desc":"* Show a dropdown field\n* **Important note**: This syntax for dropdowns can only be used with the","kind":13,"prefix":"dropdown","body":"dropdown[${1:X},${2:Y};${3:W},${4:H};${5:name};${6:item 1},${7:item 2}, ...,${8:item n};${9:selected idx}]"},{"desc":"* Show a checkbox\n* `name` fieldname data is transferred to Lua\n* `label` to be shown left of checkbox\n* `selected` (optional): `true`/`false`\n* **Note**: If the new coordinate system is enabled, checkboxes are","kind":13,"prefix":"checkbox","body":"checkbox[${1:X},${2:Y};${3:name};${4:label};${5:selected}]"},{"desc":"* Show a scrollbar\n* There are two ways to use it:","kind":13,"prefix":"scrollbar","body":"scrollbar[${1:X},${2:Y};${3:W},${4:H};${5:orientation};${6:name};${7:value}]"},{"desc":"* Show scrollable table using options defined by the previous `tableoptions[]`\n* Displays cells as defined by the previous `tablecolumns[]`\n* `name`: fieldname sent to server on row select or doubleclick\n* `cell 1`...`cell n`: cell contents given in row-major order\n* `selected idx`: index of row to be selected within table (first row = `1`)\n* See also `minetest.explode_table_event`","kind":13,"prefix":"table","body":"table[${1:X},${2:Y};${3:W},${4:H};${5:name};${6:cell 1},${7:cell 2},...,${8:cell n};${9:selected idx}]"},{"desc":"* Sets options for `table[]`\n* `color=#RRGGBB`","kind":13,"prefix":"tableoptions","body":"tableoptions[${1:opt 1};${2:opt 2};...]"},{"desc":"* Sets columns for `table[]`\n* Types: `text`, `image`, `color`, `indent`, `tree`","kind":13,"prefix":"tablecolumns","body":"tablecolumns[${1:type 1},${2:opt 1a},${3:opt 1b},...;${4:type 2},${5:opt 2a},${6:opt 2b};...]"},{"desc":"* Set the style for the named element `name`.\n* Note: this **must** be before the element is defined.\n* See [Styling Formspecs].","kind":13,"prefix":"style","body":"style[${1:name};${2:prop1};${3:prop2};...]"},{"desc":"* Sets the style for all elements of type `type` which appear after this element.\n* See [Styling Formspecs].","kind":13,"prefix":"style_type","body":"style_type[${1:type};${2:prop1};${3:prop2};...]"},{"desc":"Creates a texture of size `<w>` times `<h>` and blits the listed files to their\nspecified coordinates.","kind":13,"prefix":"combine","body":"combine:${1:w}x${2:h}:${3:x1},${4:y1}=${5:file1}:${6:x2},${7:y2}=${8:file2}:..."},{"desc":"Resizes the texture to the given dimensions.","kind":13,"prefix":"resize","body":"resize:${1:w}x${2:h}"},{"desc":"Makes the base image transparent according to the given ratio.","kind":13,"prefix":"opacity","body":"opacity:${1:r}"},{"desc":"Inverts the given channels of the base image.\nMode may contain the characters \"r\", \"g\", \"b\", \"a\".\nOnly the channels that are mentioned in the mode string will be inverted.","kind":13,"prefix":"invert","body":"invert:${1:mode}"},{"desc":"Brightens the texture.","kind":13,"prefix":"brighten","body":"brighten"},{"desc":"Makes the texture completely opaque.","kind":13,"prefix":"noalpha","body":"noalpha"},{"desc":"Convert one color to transparency.","kind":13,"prefix":"makealpha","body":"makealpha:${1:r},${2:g},${3:b}"},{"desc":"Rotates and/or flips the image.","kind":13,"prefix":"transform<t>","body":"transform${1:t}"},{"desc":"Escaping does not apply here and `^` is replaced by `&` in texture names\ninstead.","kind":13,"prefix":"inventorycube{<top>{<left>{<right>","body":"inventorycube{${1:top}{${2:left}{${3:right}"},{"desc":"Blit the lower `<percent>`% part of `<file>` on the texture.","kind":13,"prefix":"lowpart","body":"lowpart:${1:percent}:${2:file}"},{"desc":"Crops the texture to a frame of a vertical animation.","kind":13,"prefix":"verticalframe","body":"verticalframe:${1:t}:${2:n}"},{"desc":"Apply a mask to the base image.","kind":13,"prefix":"mask","body":"mask:${1:file}"},{"desc":"Retrieves a tile at position x,y from the base image\nwhich it assumes to be a tilesheet with dimensions w,h.","kind":13,"prefix":"sheet","body":"sheet:${1:w}x${2:h}:${3:x},${4:y}"},{"desc":"Colorize the textures with the given color.","kind":13,"prefix":"colorize","body":"colorize:${1:color}:${2:ratio}"},{"desc":"Multiplies texture colors with the given color.","kind":13,"prefix":"multiply","body":"multiply:${1:color}"},{"desc":"    * `color` is a ColorString\n    * The escape sequence sets the text color to `color`","kind":2,"prefix":"minetest.get_color_escape_sequence","body":"minetest.get_color_escape_sequence(${1:color})"},{"desc":"    * Equivalent to:\n      `minetest.get_color_escape_sequence(color) ..\n      message ..\n      minetest.get_color_escape_sequence(\"#ffffff\")`","kind":2,"prefix":"minetest.colorize","body":"minetest.colorize(${1:color}, ${2:message})"},{"desc":"    * `color` is a ColorString\n    * The escape sequence sets the background of the whole text element to\n      `color`. Only defined for item descriptions and tooltips.","kind":2,"prefix":"minetest.get_background_escape_sequence","body":"minetest.get_background_escape_sequence(${1:color})"},{"desc":"    * Removes foreground colors added by `get_color_escape_sequence`.","kind":2,"prefix":"minetest.strip_foreground_colors","body":"minetest.strip_foreground_colors(${1:str})"},{"desc":"    * Removes background colors added by `get_background_escape_sequence`.","kind":2,"prefix":"minetest.strip_background_colors","body":"minetest.strip_background_colors(${1:str})"},{"desc":"    * Removes all color escape sequences.","kind":2,"prefix":"minetest.strip_colors","body":"minetest.strip_colors(${1:str})"},{"desc":"    * Returns a vector.\n    * A copy of `a` if `a` is a vector.\n    * `{x = a, y = b, z = c}`, if all of `a`, `b`, `c` are defined numbers.","kind":2,"prefix":"vector.new","body":"vector.new(${1:a}[, ${2:b}, ${3:c}])"},{"desc":"    * Returns a vector of length 1 with direction `p1` to `p2`.\n    * If `p1` and `p2` are identical, returns `{x = 0, y = 0, z = 0}`.","kind":2,"prefix":"vector.direction","body":"vector.direction(${1:p1}, ${2:p2})"},{"desc":"    * Returns zero or a positive number, the distance between `p1` and `p2`.","kind":2,"prefix":"vector.distance","body":"vector.distance(${1:p1}, ${2:p2})"},{"desc":"    * Returns zero or a positive number, the length of vector `v`.","kind":2,"prefix":"vector.length","body":"vector.length(${1:v})"},{"desc":"    * Returns a vector of length 1 with direction of vector `v`.\n    * If `v` has zero length, returns `{x = 0, y = 0, z = 0}`.","kind":2,"prefix":"vector.normalize","body":"vector.normalize(${1:v})"},{"desc":"    * Returns a vector, each dimension rounded down.","kind":2,"prefix":"vector.floor","body":"vector.floor(${1:v})"},{"desc":"    * Returns a vector, each dimension rounded to nearest integer.","kind":2,"prefix":"vector.round","body":"vector.round(${1:v})"},{"desc":"    * Returns a vector where the function `func` has been applied to each\n      component.","kind":2,"prefix":"vector.apply","body":"vector.apply(${1:v}, ${2:func})"},{"desc":"    * Returns a boolean, `true` if the vectors are identical.","kind":2,"prefix":"vector.equals","body":"vector.equals(${1:v1}, ${2:v2})"},{"desc":"    * Returns in order minp, maxp vectors of the cuboid defined by `v1`, `v2`.","kind":2,"prefix":"vector.sort","body":"vector.sort(${1:v1}, ${2:v2})"},{"desc":"    * Returns the angle between `v1` and `v2` in radians.","kind":2,"prefix":"vector.angle","body":"vector.angle(${1:v1}, ${2:v2})"},{"desc":"    * Returns the dot product of `v1` and `v2`","kind":2,"prefix":"vector.dot","body":"vector.dot(${1:v1}, ${2:v2})"},{"desc":"    * Returns the cross product of `v1` and `v2`","kind":2,"prefix":"vector.cross","body":"vector.cross(${1:v1}, ${2:v2})"},{"desc":"    * Returns a vector.\n    * If `x` is a vector: Returns the sum of `v` and `x`.\n    * If `x` is a number: Adds `x` to each component of `v`.","kind":2,"prefix":"vector.add","body":"vector.add(${1:v}, ${2:x})"},{"desc":"    * Returns a vector.\n    * If `x` is a vector: Returns the difference of `v` subtracted by `x`.\n    * If `x` is a number: Subtracts `x` from each component of `v`.","kind":2,"prefix":"vector.subtract","body":"vector.subtract(${1:v}, ${2:x})"},{"desc":"    * Returns a scaled vector or Schur product.","kind":2,"prefix":"vector.multiply","body":"vector.multiply(${1:v}, ${2:x})"},{"desc":"    * Returns a scaled vector or Schur quotient.","kind":2,"prefix":"vector.divide","body":"vector.divide(${1:v}, ${2:x})"},{"desc":"returns a string which makes `obj`\n  human-readable, handles reference loops.\n    * `obj`: arbitrary variable\n    * `name`: string, default: `\"_\"`\n    * `dumped`: table, default: `{}`","kind":2,"prefix":"dump2","body":"dump2(${1:obj}, ${2:name}, ${3:dumped})"},{"desc":"returns a string which makes `obj` human-readable\n    * `obj`: arbitrary variable\n    * `dumped`: table, default: `{}`","kind":2,"prefix":"dump","body":"dump(${1:obj}, ${2:dumped})"},{"desc":"    * Get the hypotenuse of a triangle with legs x and y.\n      Useful for distance calculation.","kind":2,"prefix":"math.hypot","body":"math.hypot(${1:x}, ${2:y})"},{"desc":"returns `-1`, `0` or `1`\n    * Get the sign of a number.\n    * tolerance: number, default: `0.0`\n    * If the absolute value of `x` is within the `tolerance` or `x` is NaN,\n      `0` is returned.","kind":2,"prefix":"math.sign","body":"math.sign(${1:x}, ${2:tolerance})"},{"desc":"returns the factorial of `x`","kind":2,"prefix":"math.factorial","body":"math.factorial(${1:x})"},{"desc":"    * `separator`: string, default: `\",\"`\n    * `include_empty`: boolean, default: `false`\n    * `max_splits`: number, if it's negative, splits aren't limited,\n      default: `-1`\n    * `sep_is_pattern`: boolean, it specifies whether separator is a plain\n      string or a pattern (regex), default: `false`\n    * e.g. `\"a,b\":split\",\"` returns `{\"a\",\"b\"}`","kind":2,"prefix":"string.split","body":"string.split(${1:str}, ${2:separator}, ${3:include_empty}, ${4:max_splits}, ${5:sep_is_pattern})"},{"desc":"returns the string without whitespace pre- and suffixes\n    * e.g. `\"\\n \\t\\tfoo bar\\t \":trim()` returns `\"foo bar\"`","kind":2,"prefix":"string:trim","body":"string:trim()"},{"desc":"returns a string or table\n    * Adds newlines to the string to keep it within the specified character\n      limit\n    * Note that the returned lines may be longer than the limit since it only\n      splits at word borders.\n    * `limit`: number, maximal amount of characters in one line\n    * `as_table`: boolean, if set to true, a table of lines instead of a string\n      is returned, default: `false`","kind":2,"prefix":"minetest.wrap_text","body":"minetest.wrap_text(${1:str}, ${2:limit}, ${3:as_table})"},{"desc":"returns string `\\\"(X,Y,Z)\\\"`\n    * `pos`: table {x=X, y=Y, z=Z}\n    * Converts the position `pos` to a human-readable, printable string\n    * `decimal_places`: number, if specified, the x, y and z values of\n      the position are rounded to the given decimal place.","kind":2,"prefix":"minetest.pos_to_string","body":"minetest.pos_to_string(${1:pos}, ${2:decimal_places})"},{"desc":"returns a position or `nil`\n    * Same but in reverse.\n    * If the string can't be parsed to a position, nothing is returned.","kind":2,"prefix":"minetest.string_to_pos","body":"minetest.string_to_pos(${1:string})"},{"desc":"returns two positions\n    * Converts a string representing an area box into two positions","kind":2,"prefix":"minetest.string_to_area","body":"minetest.string_to_area(\"(${1:X1}, ${2:Y1}, ${3:Z1})${4:}(${5:X2}, ${6:Y2}, ${7:Z2})\")"},{"desc":"returns a string\n    * escapes the characters \"[\", \"]\", \"\\\", \",\" and \";\", which can not be used\n      in formspecs.","kind":2,"prefix":"minetest.formspec_escape","body":"minetest.formspec_escape(${1:string})"},{"desc":"    * returns true if passed 'y', 'yes', 'true' or a number that isn't zero.","kind":2,"prefix":"minetest.is_yes","body":"minetest.is_yes(${1:arg})"},{"desc":"    * returns true when the passed number represents NaN.","kind":2,"prefix":"minetest.is_nan","body":"minetest.is_nan(${1:arg})"},{"desc":"    * returns time with microsecond precision. May not return wall time.","kind":2,"prefix":"minetest.get_us_time","body":"minetest.get_us_time()"},{"desc":"returns a table\n    * returns a deep copy of `table`","kind":2,"prefix":"table.copy","body":"table.copy(${1:table})"},{"desc":"returns the smallest numerical index containing\n      the value `val` in the table `list`. Non-numerical indices are ignored.\n      If `val` could not be found, `-1` is returned. `list` must not have\n      negative indices.","kind":2,"prefix":"table.indexof","body":"table.indexof(${1:list}, ${2:val})"},{"desc":"    * Appends all values in `other_table` to `table` - uses `#table + 1` to\n      find new indices.","kind":2,"prefix":"table.insert_all","body":"table.insert_all(${1:table}, ${2:other_table})"},{"desc":"returns a\n  position.\n    * returns the exact position on the surface of a pointed node","kind":2,"prefix":"minetest.pointed_thing_to_face_pos","body":"minetest.pointed_thing_to_face_pos(${1:placer}, ${2:pointed_thing})"},{"desc":"Simulates a tool\n    that digs a node.\n    Returns a table with the following fields:\n    * `diggable`: `true` if node can be dug, `false` otherwise.\n    * `time`: Time it would take to dig the node.\n    * `wear`: How much wear would be added to the tool.\n    `time` and `wear` are meaningless if node's not diggable\n    Parameters:\n    * `groups`: Table of the node groups of the node that would be dug\n    * `tool_capabilities`: Tool capabilities table of the tool","kind":2,"prefix":"minetest.get_dig_params","body":"minetest.get_dig_params(${1:groups}, ${2:tool_capabilities})"},{"desc":"    Simulates an item that punches an object.\n    Returns a table with the following fields:\n    * `hp`: How much damage the punch would cause.\n    * `wear`: How much wear would be added to the tool.\n    Parameters:\n    * `groups`: Damage groups of the object\n    * `tool_capabilities`: Tool capabilities table of the item\n    * `time_from_last_punch`: time in seconds since last punch action","kind":2,"prefix":"minetest.get_hit_params","body":"minetest.get_hit_params(${1:groups}, ${2:tool_capabilities }[, ${3:time_from_last_punch}])"},{"desc":" Loads a chunk of map into the VoxelManip object\n  containing the region formed by `p1` and `p2`.\n    * returns actual emerged `pmin`, actual emerged `pmax`","kind":2,"prefix":"read_from_map","body":"read_from_map(${1:p1}, ${2:p2})"},{"desc":"Writes the data loaded from the `VoxelManip` back to\n  the map.\n    * **important**: data must be set using `VoxelManip:set_data()` before\n      calling this.\n    * if `light` is true, then lighting is automatically recalculated.\n      The default value is true.\n      If `light` is false, no light calculations happen, and you should correct\n      all modified blocks with `minetest.fix_light()` as soon as possible.\n      Keep in mind that modifying the map where light is incorrect can cause\n      more lighting bugs.","kind":2,"prefix":"write_to_map","body":"write_to_map([${1:light}])"},{"desc":"Returns a `MapNode` table of the node currently loaded in\n  the `VoxelManip` at that position","kind":2,"prefix":"get_node_at","body":"get_node_at(${1:pos})"},{"desc":"Sets a specific `MapNode` in the `VoxelManip` at\n  that position.","kind":2,"prefix":"set_node_at","body":"set_node_at(${1:pos}, ${2:node})"},{"desc":"Retrieves the node content data loaded into the\n  `VoxelManip` object.\n    * returns raw node data in the form of an array of node content IDs\n    * if the param `buffer` is present, this table will be used to store the\n      result instead.","kind":2,"prefix":"get_data","body":"get_data([${1:buffer}])"},{"desc":"Sets the data contents of the `VoxelManip` object","kind":2,"prefix":"set_data","body":"set_data(${1:data})"},{"desc":"Does nothing, kept for compatibility.","kind":2,"prefix":"update_map","body":"update_map()"},{"desc":"Set the lighting within the `VoxelManip` to\n  a uniform value.\n    * `light` is a table, `{day=<0...15>, night=<0...15>}`\n    * To be used only by a `VoxelManip` object from\n      `minetest.get_mapgen_object`.\n    * (`p1`, `p2`) is the area in which lighting is set, defaults to the whole\n      area if left out.","kind":2,"prefix":"set_lighting","body":"set_lighting(${1:light}, ${2:}[${3:p1}, ${4:p2}])"},{"desc":"Gets the light data read into the `VoxelManip` object\n    * Returns an array (indices 1 to volume) of integers ranging from `0` to\n      `255`.\n    * Each value is the bitwise combination of day and night light values\n      (`0` to `15` each).\n    * `light = day + (night * 16)`","kind":2,"prefix":"get_light_data","body":"get_light_data()"},{"desc":"Sets the `param1` (light) contents of each node\n  in the `VoxelManip`.\n    * expects lighting data in the same format that `get_light_data()` returns","kind":2,"prefix":"set_light_data","body":"set_light_data(${1:light_data})"},{"desc":"Gets the raw `param2` data read into the\n  `VoxelManip` object.\n    * Returns an array (indices 1 to volume) of integers ranging from `0` to\n      `255`.\n    * If the param `buffer` is present, this table will be used to store the\n      result instead.","kind":2,"prefix":"get_param2_data","body":"get_param2_data([${1:buffer}])"},{"desc":"Sets the `param2` contents of each node in\n  the `VoxelManip`.","kind":2,"prefix":"set_param2_data","body":"set_param2_data(${1:param2_data})"},{"desc":" Calculate lighting within the\n  `VoxelManip`.\n    * To be used only by a `VoxelManip` object from\n      `minetest.get_mapgen_object`.\n    * (`p1`, `p2`) is the area in which lighting is set, defaults to the whole\n      area if left out or nil. For almost all uses these should be left out\n      or nil to use the default.\n    * `propagate_shadow` is an optional boolean deciding whether shadows in a\n      generated mapchunk above are propagated down into the mapchunk, defaults\n      to `true` if left out.","kind":2,"prefix":"calc_lighting","body":"calc_lighting([${1:p1}, ${2:p2}], ${3:}[${4:propagate_shadow}])"},{"desc":"Update liquid flow","kind":2,"prefix":"update_liquids","body":"update_liquids()"},{"desc":"Returns `true` or `false` if the data in the voxel\n  manipulator had been modified since the last read from map, due to a call to\n  `minetest.set_data()` on the loaded area elsewhere.","kind":2,"prefix":"was_modified","body":"was_modified()"},{"desc":"Returns actual emerged minimum and maximum positions.","kind":2,"prefix":"get_emerged_area","body":"get_emerged_area()"},{"desc":"    * Called when the object is instantiated.\n    * `dtime_s` is the time passed since the object was unloaded, which can be\n      used for updating the entity state.","kind":2,"prefix":"on_activate","body":"on_activate(${1:self}, ${2:staticdata}, ${3:dtime_s})"},{"desc":"    * Called on every server tick, after movement and collision processing.\n      `dtime` is usually 0.1 seconds, as per the `dedicated_server_step` setting\n      in `minetest.conf`.","kind":2,"prefix":"on_step","body":"on_step(${1:self}, ${2:dtime})"},{"desc":"    * Called when somebody punches the object.\n    * Note that you probably want to handle most punches using the automatic\n      armor group system.\n    * `puncher`: an `ObjectRef` (can be `nil`)\n    * `time_from_last_punch`: Meant for disallowing spamming of clicks\n      (can be `nil`).\n    * `tool_capabilities`: capability table of used tool (can be `nil`)\n    * `dir`: unit vector of direction of punch. Always defined. Points from the\n      puncher to the punched.\n    * `damage`: damage that will be done to entity.","kind":2,"prefix":"on_punch","body":"on_punch(${1:self}, ${2:puncher}, ${3:time_from_last_punch}, ${4:tool_capabilities}, ${5:dir}, ${6:damage})"},{"desc":"    * Called when the object dies.\n    * `killer`: an `ObjectRef` (can be `nil`)","kind":2,"prefix":"on_death","body":"on_death(${1:self}, ${2:killer})"},{"desc":"","kind":2,"prefix":"on_rightclick","body":"on_rightclick(${1:self}, ${2:clicker})"},{"desc":"    * `child`: an `ObjectRef` of the child that attaches","kind":2,"prefix":"on_attach_child","body":"on_attach_child(${1:self}, ${2:child})"},{"desc":"    * `child`: an `ObjectRef` of the child that detaches","kind":2,"prefix":"on_detach_child","body":"on_detach_child(${1:self}, ${2:child})"},{"desc":"    * `parent`: an `ObjectRef` (can be `nil`) from where it got detached\n    * This happens before the parent object is removed from the world","kind":2,"prefix":"on_detach","body":"on_detach(${1:self}, ${2:parent})"},{"desc":"    * Should return a string that will be passed to `on_activate` when the\n      object is instantiated the next time.","kind":2,"prefix":"get_staticdata","body":"get_staticdata(${1:self})"},{"desc":"returns the currently loading mod's name,\n  when loading a mod.","kind":2,"prefix":"minetest.get_current_modname","body":"minetest.get_current_modname()"},{"desc":"returns e.g.\n  `\"/home/user/.minetest/usermods/modname\"`.\n    * Useful for loading additional `.lua` modules or static data from mod","kind":2,"prefix":"minetest.get_modpath","body":"minetest.get_modpath(${1:modname})"},{"desc":"returns a list of installed mods\n    * Return a list of installed mods, sorted alphabetically","kind":2,"prefix":"minetest.get_modnames","body":"minetest.get_modnames()"},{"desc":"returns e.g. `\\\"/home/user/.minetest/world\\\"`\n    * Useful for storing custom data","kind":2,"prefix":"minetest.get_worldpath","body":"minetest.get_worldpath()"},{"desc":"* `minetest.features`: Table containing API feature flags","kind":2,"prefix":"minetest.is_singleplayer","body":"minetest.is_singleplayer()"},{"desc":"returns `boolean, missing_features`\n    * `arg`: string or table in format `{foo=true, bar=true}`\n    * `missing_features`: `{foo=true, bar=true}`","kind":2,"prefix":"minetest.has_feature","body":"minetest.has_feature(${1:arg})"},{"desc":"Table containing information\n  about a player. Example return value:","kind":2,"prefix":"minetest.get_player_information","body":"minetest.get_player_information(${1:player_name})"},{"desc":"returns success.\n    * Creates a directory specified by `path`, creating parent directories\n      if they don't exist.","kind":2,"prefix":"minetest.mkdir","body":"minetest.mkdir(${1:path})"},{"desc":"returns list of entry names\n    * is_dir is one of:\n        * nil: return all entries,\n        * true: return only subdirectory names, or\n        * false: return only file names.","kind":2,"prefix":"minetest.get_dir_list","body":"minetest.get_dir_list(${1:path}, ${2:}[${3:is_dir}])"},{"desc":"returns boolean indicating success\n    * Replaces contents of file at path with new contents in a safe (atomic)\n      way. Use this instead of below code when writing e.g. database files:\n      `local f = io.open(path, \"wb\"); f:write(content); f:close()`","kind":2,"prefix":"minetest.safe_file_write","body":"minetest.safe_file_write(${1:path}, ${2:content})"},{"desc":"returns a table containing components of the\n   engine version.  Components:\n    * `project`: Name of the project, eg, \"Minetest\"\n    * `string`: Simple version, eg, \"1.2.3-dev\"\n    * `hash`: Full git version (only set if available),\n      eg, \"1.2.3-dev-01234567-dirty\".\n  Use this for informational purposes only. The information in the returned\n  table does not represent the capabilities of the engine, nor is it\n  reliable or verifiable. Compatible forks will have a different name and\n  version entirely. To check for the presence of engine features, test\n  whether the functions exported by the wanted features exist. For example:\n  `if minetest.check_for_falling then ... end`.","kind":2,"prefix":"minetest.get_version","body":"minetest.get_version()"},{"desc":"returns the sha1 hash of data\n    * `data`: string of data to hash\n    * `raw`: return raw bytes instead of hex digits, default: false","kind":2,"prefix":"minetest.sha1","body":"minetest.sha1(${1:data}, ${2:}[${3:raw}])"},{"desc":"    * Equivalent to `minetest.log(table.concat({...}, \"\\t\"))`","kind":2,"prefix":"minetest.debug","body":"minetest.debug(...)"},{"desc":"    * `level` is one of `\"none\"`, `\"error\"`, `\"warning\"`, `\"action\"`,\n      `\"info\"`, or `\"verbose\"`.  Default is `\"none\"`.","kind":2,"prefix":"minetest.log","body":"minetest.log([${1:level}, ]${2:text})"},{"desc":"","kind":2,"prefix":"minetest.register_node","body":"minetest.register_node(${1:name}, ${2:node definition})"},{"desc":"","kind":2,"prefix":"minetest.register_craftitem","body":"minetest.register_craftitem(${1:name}, ${2:item definition})"},{"desc":"","kind":2,"prefix":"minetest.register_tool","body":"minetest.register_tool(${1:name}, ${2:item definition})"},{"desc":"    * Overrides fields of an item registered with register_node/tool/craftitem.\n    * Note: Item must already be defined, (opt)depend on the mod defining it.\n    * Example: `minetest.override_item(\"default:mese\",\n      {light_source=minetest.LIGHT_MAX})`","kind":2,"prefix":"minetest.override_item","body":"minetest.override_item(${1:name}, ${2:redefinition})"},{"desc":"    * Unregisters the item from the engine, and deletes the entry with key\n      `name` from `minetest.registered_items` and from the associated item table\n      according to its nature: `minetest.registered_nodes`, etc.","kind":2,"prefix":"minetest.unregister_item","body":"minetest.unregister_item(${1:name})"},{"desc":"","kind":2,"prefix":"minetest.register_entity","body":"minetest.register_entity(${1:name}, ${2:entity definition})"},{"desc":"","kind":2,"prefix":"minetest.register_abm","body":"minetest.register_abm(${1:abm definition})"},{"desc":"","kind":2,"prefix":"minetest.register_lbm","body":"minetest.register_lbm(${1:lbm definition})"},{"desc":"    * Also use this to set the 'mapgen aliases' needed in a game for the core\n      mapgens. See [Mapgen aliases] section above.","kind":2,"prefix":"minetest.register_alias","body":"minetest.register_alias(${1:alias}, ${2:original_name})"},{"desc":"","kind":2,"prefix":"minetest.register_alias_force","body":"minetest.register_alias_force(${1:alias}, ${2:original_name})"},{"desc":"    * Returns an integer object handle uniquely identifying the registered\n      ore on success.\n    * The order of ore registrations determines the order of ore generation.","kind":2,"prefix":"minetest.register_ore","body":"minetest.register_ore(${1:ore definition})"},{"desc":"    * Returns an integer object handle uniquely identifying the registered\n      biome on success. To get the biome ID, use `minetest.get_biome_id`.","kind":2,"prefix":"minetest.register_biome","body":"minetest.register_biome(${1:biome definition})"},{"desc":"    * Unregisters the biome from the engine, and deletes the entry with key\n      `name` from `minetest.registered_biomes`.","kind":2,"prefix":"minetest.unregister_biome","body":"minetest.unregister_biome(${1:name})"},{"desc":"    * Returns an integer object handle uniquely identifying the registered\n      decoration on success. To get the decoration ID, use\n      `minetest.get_decoration_id`.\n    * The order of decoration registrations determines the order of decoration\n      generation.","kind":2,"prefix":"minetest.register_decoration","body":"minetest.register_decoration(${1:decoration definition})"},{"desc":"    * Returns an integer object handle uniquely identifying the registered\n      schematic on success.\n    * If the schematic is loaded from a file, the `name` field is set to the\n      filename.\n    * If the function is called when loading the mod, and `name` is a relative\n      path, then the current mod path will be prepended to the schematic\n      filename.","kind":2,"prefix":"minetest.register_schematic","body":"minetest.register_schematic(${1:schematic definition})"},{"desc":"    * Clears all ores currently registered.","kind":2,"prefix":"minetest.clear_registered_ores","body":"minetest.clear_registered_ores()"},{"desc":"    * Clears all biomes currently registered.","kind":2,"prefix":"minetest.clear_registered_biomes","body":"minetest.clear_registered_biomes()"},{"desc":"    * Clears all decorations currently registered.","kind":2,"prefix":"minetest.clear_registered_decorations","body":"minetest.clear_registered_decorations()"},{"desc":"    * Clears all schematics currently registered.","kind":2,"prefix":"minetest.clear_registered_schematics","body":"minetest.clear_registered_schematics()"},{"desc":"    * Check recipe table syntax for different types below.","kind":2,"prefix":"minetest.register_craft","body":"minetest.register_craft(${1:recipe})"},{"desc":"    * Will erase existing craft based either on output item or on input recipe.\n    * Specify either output or input only. If you specify both, input will be\n      ignored. For input use the same recipe table syntax as for\n      `minetest.register_craft(recipe)`. For output specify only the item,\n      without a quantity.\n    * Returns false if no erase candidate could be found, otherwise returns true.\n    * **Warning**! The type field (\"shaped\", \"cooking\" or any other) will be\n      ignored if the recipe contains output. Erasing is then done independently\n      from the crafting method.","kind":2,"prefix":"minetest.clear_craft","body":"minetest.clear_craft(${1:recipe})"},{"desc":"","kind":2,"prefix":"minetest.register_chatcommand","body":"minetest.register_chatcommand(${1:cmd}, ${2:chatcommand definition})"},{"desc":"    * Overrides fields of a chatcommand registered with `register_chatcommand`.","kind":2,"prefix":"minetest.override_chatcommand","body":"minetest.override_chatcommand(${1:name}, ${2:redefinition})"},{"desc":"    * Unregisters a chatcommands registered with `register_chatcommand`.","kind":2,"prefix":"minetest.unregister_chatcommand","body":"minetest.unregister_chatcommand(${1:name})"},{"desc":"    * `definition` can be a description or a definition table (see [Privilege\n      definition]).\n    * If it is a description, the priv will be granted to singleplayer and admin\n      by default.\n    * To allow players with `basic_privs` to grant, see the `basic_privs`\n      minetest.conf setting.","kind":2,"prefix":"minetest.register_privilege","body":"minetest.register_privilege(${1:name}, ${2:definition})"},{"desc":"    * Registers an auth handler that overrides the builtin one.\n    * This function can be called by a single mod once only.","kind":2,"prefix":"minetest.register_authentication_handler","body":"minetest.register_authentication_handler(${1:authentication handler definition})"},{"desc":"    * Called every server step, usually interval of 0.1s","kind":2,"prefix":"minetest.register_globalstep","body":"minetest.register_globalstep(${1:function}(${2:dtime}))"},{"desc":"    * Called after mods have finished loading and before the media is cached or the\n      aliases handled.","kind":2,"prefix":"minetest.register_on_mods_loaded","body":"minetest.register_on_mods_loaded(${1:function}())"},{"desc":"    * Called before server shutdown\n    * **Warning**: If the server terminates abnormally (i.e. crashes), the\n      registered callbacks **will likely not be run**. Data should be saved at\n      semi-frequent intervals as well as on server shutdown.","kind":2,"prefix":"minetest.register_on_shutdown","body":"minetest.register_on_shutdown(${1:function}())"},{"desc":"    * Called when a node has been placed\n    * If return `true` no item is taken from `itemstack`\n    * `placer` may be any valid ObjectRef or nil.\n    * **Not recommended**; use `on_construct` or `after_place_node` in node\n      definition whenever possible.","kind":2,"prefix":"minetest.register_on_placenode","body":"minetest.register_on_placenode(${1:function}(${2:pos}, ${3:newnode}, ${4:placer}, ${5:oldnode}, ${6:itemstack}, ${7:pointed_thing}))"},{"desc":"    * Called when a node has been dug.\n    * **Not recommended**; Use `on_destruct` or `after_dig_node` in node\n      definition whenever possible.","kind":2,"prefix":"minetest.register_on_dignode","body":"minetest.register_on_dignode(${1:function}(${2:pos}, ${3:oldnode}, ${4:digger}))"},{"desc":"    * Called when a node is punched","kind":2,"prefix":"minetest.register_on_punchnode","body":"minetest.register_on_punchnode(${1:function}(${2:pos}, ${3:node}, ${4:puncher}, ${5:pointed_thing}))"},{"desc":"    * Called after generating a piece of world. Modifying nodes inside the area\n      is a bit faster than usually.","kind":2,"prefix":"minetest.register_on_generated","body":"minetest.register_on_generated(${1:function}(${2:minp}, ${3:maxp}, ${4:blockseed}))"},{"desc":"    * Called after a new player has been created","kind":2,"prefix":"minetest.register_on_newplayer","body":"minetest.register_on_newplayer(${1:function}(${2:ObjectRef}))"},{"desc":"    * Called when a player is punched\n    * Note: This callback is invoked even if the punched player is dead.\n    * `player`: ObjectRef - Player that was punched\n    * `hitter`: ObjectRef - Player that hit\n    * `time_from_last_punch`: Meant for disallowing spamming of clicks\n      (can be nil).\n    * `tool_capabilities`: Capability table of used tool (can be nil)\n    * `dir`: Unit vector of direction of punch. Always defined. Points from\n      the puncher to the punched.\n    * `damage`: Number that represents the damage calculated by the engine\n    * should return `true` to prevent the default damage mechanism","kind":2,"prefix":"minetest.register_on_punchplayer","body":"minetest.register_on_punchplayer(${1:function}(${2:player}, ${3:hitter}, ${4:time_from_last_punch}, ${5:tool_capabilities}, ${6:dir}, ${7:damage}))"},{"desc":"    * Called when the player gets damaged or healed\n    * `player`: ObjectRef of the player\n    * `hp_change`: the amount of change. Negative when it is damage.\n    * `reason`: a PlayerHPChangeReason table.\n        * The `type` field will have one of the following values:\n            * `set_hp`: A mod or the engine called `set_hp` without\n                        giving a type - use this for custom damage types.\n            * `punch`: Was punched. `reason.object` will hold the puncher, or nil if none.\n            * `fall`\n            * `node_damage`: `damage_per_second` from a neighbouring node.\n                             `reason.node` will hold the node name or nil.\n            * `drown`\n            * `respawn`\n        * Any of the above types may have additional fields from mods.\n        * `reason.from` will be `mod` or `engine`.\n    * `modifier`: when true, the function should return the actual `hp_change`.\n       Note: modifiers only get a temporary `hp_change` that can be modified by later modifiers.\n       Modifiers can return true as a second argument to stop the execution of further functions.\n       Non-modifiers receive the final HP change calculated by the modifiers.","kind":2,"prefix":"minetest.register_on_player_hpchange","body":"minetest.register_on_player_hpchange(${1:function}(${2:player}, ${3:hp_change}, ${4:reason}), ${5:modifier})"},{"desc":"    * Called when a player dies\n    * `reason`: a PlayerHPChangeReason table, see register_on_player_hpchange","kind":2,"prefix":"minetest.register_on_dieplayer","body":"minetest.register_on_dieplayer(${1:function}(${2:ObjectRef}, ${3:reason}))"},{"desc":"    * Called when player is to be respawned\n    * Called _before_ repositioning of player occurs\n    * return true in func to disable regular player placement","kind":2,"prefix":"minetest.register_on_respawnplayer","body":"minetest.register_on_respawnplayer(${1:function}(${2:ObjectRef}))"},{"desc":"    * Called before a player joins the game\n    * If it returns a string, the player is disconnected with that string as\n      reason.","kind":2,"prefix":"minetest.register_on_prejoinplayer","body":"minetest.register_on_prejoinplayer(${1:function}(${2:name}, ${3:ip}))"},{"desc":"    * Called when a player joins the game","kind":2,"prefix":"minetest.register_on_joinplayer","body":"minetest.register_on_joinplayer(${1:function}(${2:ObjectRef}))"},{"desc":"    * Called when a player leaves the game\n    * `timed_out`: True for timeout, false for other reasons.","kind":2,"prefix":"minetest.register_on_leaveplayer","body":"minetest.register_on_leaveplayer(${1:function}(${2:ObjectRef}, ${3:timed_out}))"},{"desc":"    * Called when a client attempts to log into an account but supplies the\n      wrong password.\n    * `ip`: The IP address of the client.\n    * `name`: The account the client attempted to log into.","kind":2,"prefix":"minetest.register_on_auth_fail","body":"minetest.register_on_auth_fail(${1:function}(${2:name}, ${3:ip}))"},{"desc":"    * Called when a player cheats\n    * `cheat`: `{type=<cheat_type>}`, where `<cheat_type>` is one of:\n        * `moved_too_fast`\n        * `interacted_too_far`\n        * `interacted_while_dead`\n        * `finished_unknown_dig`\n        * `dug_unbreakable`\n        * `dug_too_fast`","kind":2,"prefix":"minetest.register_on_cheat","body":"minetest.register_on_cheat(${1:function}(${2:ObjectRef}, ${3:cheat}))"},{"desc":"    * Called always when a player says something\n    * Return `true` to mark the message as handled, which means that it will\n      not be sent to other players.","kind":2,"prefix":"minetest.register_on_chat_message","body":"minetest.register_on_chat_message(${1:function}(${2:name}, ${3:message}))"},{"desc":"    * Called when the server received input from `player` in a formspec with\n      the given `formname`. Specifically, this is called on any of the\n      following events:\n          * a button was pressed,\n          * Enter was pressed while the focus was on a text field\n          * a checkbox was toggled,\n          * something was selecteed in a drop-down list,\n          * a different tab was selected,\n          * selection was changed in a textlist or table,\n          * an entry was double-clicked in a textlist or table,\n          * a scrollbar was moved, or\n          * the form was actively closed by the player.\n    * Fields are sent for formspec elements which define a field. `fields`\n      is a table containing each formspecs element value (as string), with\n      the `name` parameter as index for each. The value depends on the\n      formspec element type:\n        * `button` and variants: If pressed, contains the user-facing button\n          text as value. If not pressed, is `nil`\n        * `field`, `textarea` and variants: Text in the field\n        * `dropdown`: Text of selected item\n        * `tabheader`: Tab index, starting with `\"1\"` (only if tab changed)\n        * `checkbox`: `\"true\"` if checked, `\"false\"` if unchecked\n        * `textlist`: See `minetest.explode_textlist_event`\n        * `table`: See `minetest.explode_table_event`\n        * `scrollbar`: See `minetest.explode_scrollbar_event`\n        * Special case: `[\"quit\"]=\"true\"` is sent when the user actively\n          closed the form by mouse click, keypress or through a button_exit[]\n          element.\n        * Special case: `[\"key_enter\"]=\"true\"` is sent when the user pressed\n          the Enter key and the focus was either nowhere (causing the formspec\n          to be closed) or on a button. If the focus was on a text field,\n          additionally, the index `key_enter_field` contains the name of the\n          text field. See also: `field_close_on_enter`.\n    * Newest functions are called first\n    * If function returns `true`, remaining functions are not called","kind":2,"prefix":"minetest.register_on_player_receive_fields","body":"minetest.register_on_player_receive_fields(${1:function}(${2:player}, ${3:formname}, ${4:fields}))"},{"desc":"    * Called when `player` crafts something\n    * `itemstack` is the output\n    * `old_craft_grid` contains the recipe (Note: the one in the inventory is\n      cleared).\n    * `craft_inv` is the inventory with the crafting grid\n    * Return either an `ItemStack`, to replace the output, or `nil`, to not\n      modify it.","kind":2,"prefix":"minetest.register_on_craft","body":"minetest.register_on_craft(${1:function}(${2:itemstack}, ${3:player}, ${4:old_craft_grid}, ${5:craft_inv}))"},{"desc":"    * The same as before, except that it is called before the player crafts, to\n      make craft prediction, and it should not change anything.","kind":2,"prefix":"minetest.register_craft_predict","body":"minetest.register_craft_predict(${1:function}(${2:itemstack}, ${3:player}, ${4:old_craft_grid}, ${5:craft_inv}))"},{"desc":"    * Determinates how much of a stack may be taken, put or moved to a\n      player inventory.\n    * `player` (type `ObjectRef`) is the player who modified the inventory\n      `inventory` (type `InvRef`).\n    * List of possible `action` (string) values and their\n      `inventory_info` (table) contents:\n        * `move`: `{from_list=string, to_list=string, from_index=number, to_index=number, count=number}`\n        * `put`:  `{listname=string, index=number, stack=ItemStack}`\n        * `take`: Same as `put`\n    * Return a numeric value to limit the amount of items to be taken, put or\n      moved. A value of `-1` for `take` will make the source stack infinite.","kind":2,"prefix":"minetest.register_allow_player_inventory_action","body":"minetest.register_allow_player_inventory_action(${1:function}(${2:player}, ${3:action}, ${4:inventory}, ${5:inventory_info}))"},{"desc":"    * Called after a take, put or move event from/to/in a player inventory\n    * Function arguments: see `minetest.register_allow_player_inventory_action`\n    * Does not accept or handle any return value.","kind":2,"prefix":"minetest.register_on_player_inventory_action","body":"minetest.register_on_player_inventory_action(${1:function}(${2:player}, ${3:action}, ${4:inventory}, ${5:inventory_info}))"},{"desc":"    * Called by `builtin` and mods when a player violates protection at a\n      position (eg, digs a node or punches a protected entity).\n    * The registered functions can be called using\n      `minetest.record_protection_violation`.\n    * The provided function should check that the position is protected by the\n      mod calling this function before it prints a message, if it does, to\n      allow for multiple protection mods.","kind":2,"prefix":"minetest.register_on_protection_violation","body":"minetest.register_on_protection_violation(${1:function}(${2:pos}, ${3:name}))"},{"desc":"    * Called when an item is eaten, by `minetest.item_eat`\n    * Return `itemstack` to cancel the default item eat response (i.e.: hp increase).","kind":2,"prefix":"minetest.register_on_item_eat","body":"minetest.register_on_item_eat(${1:function}(${2:hp_change}, ${3:replace_with_item}, ${4:itemstack}, ${5:user}, ${6:pointed_thing}))"},{"desc":"    * Called when `granter` grants the priv `priv` to `name`.\n    * Note that the callback will be called twice if it's done by a player,\n      once with granter being the player name, and again with granter being nil.","kind":2,"prefix":"minetest.register_on_priv_grant","body":"minetest.register_on_priv_grant(${1:function}(${2:name}, ${3:granter}, ${4:priv}))"},{"desc":"    * Called when `revoker` revokes the priv `priv` from `name`.\n    * Note that the callback will be called twice if it's done by a player,\n      once with revoker being the player name, and again with revoker being nil.","kind":2,"prefix":"minetest.register_on_priv_revoke","body":"minetest.register_on_priv_revoke(${1:function}(${2:name}, ${3:revoker}, ${4:priv}))"},{"desc":"    * Called when `name` user connects with `ip`.\n    * Return `true` to by pass the player limit","kind":2,"prefix":"minetest.register_can_bypass_userlimit","body":"minetest.register_can_bypass_userlimit(${1:function}(${2:name}, ${3:ip}))"},{"desc":"    * Called when an incoming mod channel message is received\n    * You should have joined some channels to receive events.\n    * If message comes from a server mod, `sender` field is an empty string.","kind":2,"prefix":"minetest.register_on_modchannel_message","body":"minetest.register_on_modchannel_message(${1:function}(${2:channel_name}, ${3:sender}, ${4:message}))"},{"desc":"Loads a setting from the main settings and\n  parses it as a position (in the format `(1,2,3)`). Returns a position or nil.","kind":2,"prefix":"minetest.setting_get_pos","body":"minetest.setting_get_pos(${1:name})"},{"desc":"returns `{priv1=true,...}`","kind":2,"prefix":"minetest.string_to_privs","body":"minetest.string_to_privs(${1:str})"},{"desc":"returns `\\\"priv1,priv2,...\\\"`\n    * Convert between two privilege representations\n* `minetest.get_player_privs(name) -> {priv1=true,...}`","kind":2,"prefix":"minetest.privs_to_string","body":"minetest.privs_to_string(${1:privs})"},{"desc":"  returns `bool, missing_privs`\n    * A quickhand for checking privileges.\n    * `player_or_name`: Either a Player object or the name of a player.\n    * `...` is either a list of strings, e.g. `\"priva\", \"privb\"` or\n      a table, e.g. `{ priva = true, privb = true }`.","kind":2,"prefix":"minetest.check_player_privs","body":"minetest.check_player_privs(${1:player_or_name}, ${2:}...)"},{"desc":"    * Returns true if the \"password entry\" for a player with name matches given\n      password, false otherwise.\n    * The \"password entry\" is the password representation generated by the\n      engine as returned as part of a `get_auth()` call on the auth handler.\n    * Only use this function for making it possible to log in via password from\n      external protocols such as IRC, other uses are frowned upon.","kind":2,"prefix":"minetest.check_password_entry","body":"minetest.check_password_entry(${1:name}, ${2:entry}, ${3:password})"},{"desc":"    * Convert a name-password pair to a password hash that Minetest can use.\n    * The returned value alone is not a good basis for password checks based\n      on comparing the password hash in the database with the password hash\n      from the function, with an externally provided password, as the hash\n      in the db might use the new SRP verifier format.\n    * For this purpose, use `minetest.check_password_entry` instead.","kind":2,"prefix":"minetest.get_password_hash","body":"minetest.get_password_hash(${1:name}, ${2:raw_password})"},{"desc":"returns an IP address string for the player\n  `name`.\n    * The player needs to be online for this to be successful.","kind":2,"prefix":"minetest.get_player_ip","body":"minetest.get_player_ip(${1:name})"},{"desc":"Return the currently active auth handler\n    * See the [Authentication handler definition]\n    * Use this to e.g. get the authentication data for a player:\n      `local auth_data = minetest.get_auth_handler().get_auth(playername)`","kind":2,"prefix":"minetest.get_auth_handler","body":"minetest.get_auth_handler()"},{"desc":"    * Must be called by the authentication handler for privilege changes.\n    * `name`: string; if omitted, all auth data should be considered modified","kind":2,"prefix":"minetest.notify_authentication_modified","body":"minetest.notify_authentication_modified(${1:name})"},{"desc":"Set password hash of\n  player `name`.","kind":2,"prefix":"minetest.set_player_password","body":"minetest.set_player_password(${1:name}, ${2:password_hash})"},{"desc":"Set privileges of player\n  `name`.","kind":2,"prefix":"minetest.set_player_privs","body":"minetest.set_player_privs(${1:name}, ${2:}{${3:priv1}=${4:true}, ...})"},{"desc":"    * See `reload()` in authentication handler definition","kind":2,"prefix":"minetest.auth_reload","body":"minetest.auth_reload()"},{"desc":"","kind":2,"prefix":"minetest.chat_send_all","body":"minetest.chat_send_all(${1:text})"},{"desc":"","kind":2,"prefix":"minetest.chat_send_player","body":"minetest.chat_send_player(${1:name}, ${2:text})"},{"desc":"    * Used by the server to format a chat message, based on the setting `chat_message_format`.\n      Refer to the documentation of the setting for a list of valid placeholders.\n    * Takes player name and message, and returns the formatted string to be sent to players.\n    * Can be redefined by mods if required, for things like colored names or messages.\n    * **Only** the first occurrence of each placeholder will be replaced.","kind":2,"prefix":"minetest.format_chat_message","body":"minetest.format_chat_message(${1:name}, ${2:message})"},{"desc":"","kind":2,"prefix":"minetest.set_node","body":"minetest.set_node(${1:pos}, ${2:node})"},{"desc":"alias to `minetest.set_node`\n    * Set node at position `pos`\n    * `node`: table `{name=string, param1=number, param2=number}`\n    * If param1 or param2 is omitted, it's set to `0`.\n    * e.g. `minetest.set_node({x=0, y=10, z=0}, {name=\"default:wood\"})`","kind":2,"prefix":"minetest.add_node","body":"minetest.add_node(${1:pos}, ${2:node})"},{"desc":"    * Set node on all positions set in the first argument.\n    * e.g. `minetest.bulk_set_node({{x=0, y=1, z=1}, {x=1, y=2, z=2}}, {name=\"default:stone\"})`\n    * For node specification or position syntax see `minetest.set_node` call\n    * Faster than set_node due to single call, but still considerably slower\n      than Lua Voxel Manipulators (LVM) for large numbers of nodes.\n      Unlike LVMs, this will call node callbacks. It also allows setting nodes\n      in spread out positions which would cause LVMs to waste memory.\n      For setting a cube, this is 1.3x faster than set_node whereas LVM is 20\n      times faster.","kind":2,"prefix":"minetest.bulk_set_node","body":"minetest.bulk_set_node({${1:pos1}, ${2:pos2}, ${3:pos3}, ${4:}...}, ${5:node})"},{"desc":"    * Set node at position, but don't remove metadata","kind":2,"prefix":"minetest.swap_node","body":"minetest.swap_node(${1:pos}, ${2:node})"},{"desc":"    * By default it does the same as `minetest.set_node(pos, {name=\"air\"})`","kind":2,"prefix":"minetest.remove_node","body":"minetest.remove_node(${1:pos})"},{"desc":"    * Returns the node at the given position as table in the format\n      `{name=\"node_name\", param1=0, param2=0}`,\n      returns `{name=\"ignore\", param1=0, param2=0}` for unloaded areas.","kind":2,"prefix":"minetest.get_node","body":"minetest.get_node(${1:pos})"},{"desc":"    * Same as `get_node` but returns `nil` for unloaded areas.","kind":2,"prefix":"minetest.get_node_or_nil","body":"minetest.get_node_or_nil(${1:pos})"},{"desc":"    * Gets the light value at the given position. Note that the light value\n      \"inside\" the node at the given position is returned, so you usually want\n      to get the light value of a neighbor.\n    * `pos`: The position where to measure the light.\n    * `timeofday`: `nil` for current time, `0` for night, `0.5` for day\n    * Returns a number between `0` and `15` or `nil`","kind":2,"prefix":"minetest.get_node_light","body":"minetest.get_node_light(${1:pos}, ${2:timeofday})"},{"desc":"    * Place node with the same effects that a player would cause","kind":2,"prefix":"minetest.place_node","body":"minetest.place_node(${1:pos}, ${2:node})"},{"desc":"    * Dig node with the same effects that a player would cause\n    * Returns `true` if successful, `false` on failure (e.g. protected location)","kind":2,"prefix":"minetest.dig_node","body":"minetest.dig_node(${1:pos})"},{"desc":"    * Punch node with the same effects that a player would cause","kind":2,"prefix":"minetest.punch_node","body":"minetest.punch_node(${1:pos})"},{"desc":"    * Change node into falling node\n    * Returns `true` if successful, `false` on failure","kind":2,"prefix":"minetest.spawn_falling_node","body":"minetest.spawn_falling_node(${1:pos})"},{"desc":"    * Get a table of positions of nodes that have metadata within a region\n      {pos1, pos2}.","kind":2,"prefix":"minetest.find_nodes_with_meta","body":"minetest.find_nodes_with_meta(${1:pos1}, ${2:pos2})"},{"desc":"    * Get a `NodeMetaRef` at that position","kind":2,"prefix":"minetest.get_meta","body":"minetest.get_meta(${1:pos})"},{"desc":"    * Get `NodeTimerRef`","kind":2,"prefix":"minetest.get_node_timer","body":"minetest.get_node_timer(${1:pos})"},{"desc":"Spawn Lua-defined entity at\n  position.\n    * Returns `ObjectRef`, or `nil` if failed","kind":2,"prefix":"minetest.add_entity","body":"minetest.add_entity(${1:pos}, ${2:name}, ${3:}[${4:staticdata}])"},{"desc":"Spawn item\n    * Returns `ObjectRef`, or `nil` if failed","kind":2,"prefix":"minetest.add_item","body":"minetest.add_item(${1:pos}, ${2:item})"},{"desc":"Get an `ObjectRef` to a player","kind":2,"prefix":"minetest.get_player_by_name","body":"minetest.get_player_by_name(${1:name})"},{"desc":"returns a list of\n  ObjectRefs.\n    * `radius`: using an euclidean metric","kind":2,"prefix":"minetest.get_objects_inside_radius","body":"minetest.get_objects_inside_radius(${1:pos}, ${2:radius})"},{"desc":"    * `val` is between `0` and `1`; `0` for midnight, `0.5` for midday","kind":2,"prefix":"minetest.set_timeofday","body":"minetest.set_timeofday(${1:val})"},{"desc":"","kind":2,"prefix":"minetest.get_timeofday","body":"minetest.get_timeofday()"},{"desc":"returns the time, in seconds, since the world was\n  created.","kind":2,"prefix":"minetest.get_gametime","body":"minetest.get_gametime()"},{"desc":"returns number days elapsed since world was\n  created.\n    * accounts for time changes.","kind":2,"prefix":"minetest.get_day_count","body":"minetest.get_day_count()"},{"desc":"returns\n  pos or `nil`.\n    * `radius`: using a maximum metric\n    * `nodenames`: e.g. `{\"ignore\", \"group:tree\"}` or `\"default:dirt\"`\n    * `search_center` is an optional boolean (default: `false`)\n      If true `pos` is also checked for the nodes","kind":2,"prefix":"minetest.find_node_near","body":"minetest.find_node_near(${1:pos}, ${2:radius}, ${3:nodenames}, ${4:}[${5:search_center}])"},{"desc":"returns a list of\n  positions.\n    * `nodenames`: e.g. `{\"ignore\", \"group:tree\"}` or `\"default:dirt\"`\n    * First return value: Table with all node positions\n    * Second return value: Table with the count of each node with the node name\n      as index.\n    * Area volume is limited to 4,096,000 nodes","kind":2,"prefix":"minetest.find_nodes_in_area","body":"minetest.find_nodes_in_area(${1:pos1}, ${2:pos2}, ${3:nodenames})"},{"desc":"returns a\n  list of positions.\n    * `nodenames`: e.g. `{\"ignore\", \"group:tree\"}` or `\"default:dirt\"`\n    * Return value: Table with all node positions with a node air above\n    * Area volume is limited to 4,096,000 nodes","kind":2,"prefix":"minetest.find_nodes_in_area_under_air","body":"minetest.find_nodes_in_area_under_air(${1:pos1}, ${2:pos2}, ${3:nodenames})"},{"desc":"","kind":2,"prefix":"minetest.get_perlin","body":"minetest.get_perlin(${1:noiseparams})"},{"desc":"    * Return world-specific perlin noise (`int(worldseed)+seeddiff`)","kind":2,"prefix":"minetest.get_perlin","body":"minetest.get_perlin(${1:seeddiff}, ${2:octaves}, ${3:persistence}, ${4:spread})"},{"desc":"    * Return voxel manipulator object.\n    * Loads the manipulator from the map if positions are passed.","kind":2,"prefix":"minetest.get_voxel_manip","body":"minetest.get_voxel_manip([${1:pos1}, ${2:pos2}])"},{"desc":"    * Set the types of on-generate notifications that should be collected.\n    * `flags` is a flag field with the available flags:\n        * dungeon\n        * temple\n        * cave_begin\n        * cave_end\n        * large_cave_begin\n        * large_cave_end\n        * decoration\n    * The second parameter is a list of IDs of decorations which notification\n      is requested for.","kind":2,"prefix":"minetest.set_gen_notify","body":"minetest.set_gen_notify(${1:flags}, ${2:}{${3:deco_ids}})"},{"desc":"    * Returns a flagstring and a table with the `deco_id`s.","kind":2,"prefix":"minetest.get_gen_notify","body":"minetest.get_gen_notify()"},{"desc":"    * Returns the decoration ID number for the provided decoration name string,\n      or `nil` on failure.","kind":2,"prefix":"minetest.get_decoration_id","body":"minetest.get_decoration_id(${1:decoration_name})"},{"desc":"    * Return requested mapgen object if available (see [Mapgen objects])","kind":2,"prefix":"minetest.get_mapgen_object","body":"minetest.get_mapgen_object(${1:objectname})"},{"desc":"    * Returns the heat at the position, or `nil` on failure.","kind":2,"prefix":"minetest.get_heat","body":"minetest.get_heat(${1:pos})"},{"desc":"    * Returns the humidity at the position, or `nil` on failure.","kind":2,"prefix":"minetest.get_humidity","body":"minetest.get_humidity(${1:pos})"},{"desc":"    * Returns a table containing:\n        * `biome` the biome id of the biome at that position\n        * `heat` the heat at the position\n        * `humidity` the humidity at the position\n    * Or returns `nil` on failure.","kind":2,"prefix":"minetest.get_biome_data","body":"minetest.get_biome_data(${1:pos})"},{"desc":"    * Returns the biome id, as used in the biomemap Mapgen object and returned\n      by `minetest.get_biome_data(pos)`, for a given biome_name string.","kind":2,"prefix":"minetest.get_biome_id","body":"minetest.get_biome_id(${1:biome_name})"},{"desc":"    * Returns the biome name string for the provided biome id, or `nil` on\n      failure.\n    * If no biomes have been registered, such as in mgv6, returns `default`.","kind":2,"prefix":"minetest.get_biome_name","body":"minetest.get_biome_name(${1:biome_id})"},{"desc":"    * Deprecated: use `minetest.get_mapgen_setting(name)` instead.\n    * Returns a table containing:\n        * `mgname`\n        * `seed`\n        * `chunksize`\n        * `water_level`\n        * `flags`","kind":2,"prefix":"minetest.get_mapgen_params","body":"minetest.get_mapgen_params()"},{"desc":"    * Deprecated: use `minetest.set_mapgen_setting(name, value, override)`\n      instead.\n    * Set map generation parameters.\n    * Function cannot be called after the registration period; only\n      initialization and `on_mapgen_init`.\n    * Takes a table as an argument with the fields:\n        * `mgname`\n        * `seed`\n        * `chunksize`\n        * `water_level`\n        * `flags`\n    * Leave field unset to leave that parameter unchanged.\n    * `flags` contains a comma-delimited string of flags to set, or if the\n      prefix `\"no\"` is attached, clears instead.\n    * `flags` is in the same format and has the same options as `mg_flags` in\n      `minetest.conf`.","kind":2,"prefix":"minetest.set_mapgen_params","body":"minetest.set_mapgen_params(${1:MapgenParams})"},{"desc":"    * Gets the *active* mapgen setting (or nil if none exists) in string\n      format with the following order of precedence:\n        1) Settings loaded from map_meta.txt or overrides set during mod\n           execution.\n        2) Settings set by mods without a metafile override\n        3) Settings explicitly set in the user config file, minetest.conf\n        4) Settings set as the user config default","kind":2,"prefix":"minetest.get_mapgen_setting","body":"minetest.get_mapgen_setting(${1:name})"},{"desc":"    * Same as above, but returns the value as a NoiseParams table if the\n      setting `name` exists and is a valid NoiseParams.","kind":2,"prefix":"minetest.get_mapgen_setting_noiseparams","body":"minetest.get_mapgen_setting_noiseparams(${1:name})"},{"desc":"    * Sets a mapgen param to `value`, and will take effect if the corresponding\n      mapgen setting is not already present in map_meta.txt.\n    * `override_meta` is an optional boolean (default: `false`). If this is set\n      to true, the setting will become the active setting regardless of the map\n      metafile contents.\n    * Note: to set the seed, use `\"seed\"`, not `\"fixed_map_seed\"`.","kind":2,"prefix":"minetest.set_mapgen_setting","body":"minetest.set_mapgen_setting(${1:name}, ${2:value}, ${3:}[${4:override_meta}])"},{"desc":"    * Same as above, except value is a NoiseParams table.","kind":2,"prefix":"minetest.set_mapgen_setting_noiseparams","body":"minetest.set_mapgen_setting_noiseparams(${1:name}, ${2:value}, ${3:}[${4:override_meta}])"},{"desc":"    * Sets the noiseparams setting of `name` to the noiseparams table specified\n      in `noiseparams`.\n    * `set_default` is an optional boolean (default: `true`) that specifies\n      whether the setting should be applied to the default config or current\n      active config.","kind":2,"prefix":"minetest.set_noiseparams","body":"minetest.set_noiseparams(${1:name}, ${2:noiseparams}, ${3:set_default})"},{"desc":"    * Returns a table of the noiseparams for name.","kind":2,"prefix":"minetest.get_noiseparams","body":"minetest.get_noiseparams(${1:name})"},{"desc":"    * Generate all registered ores within the VoxelManip `vm` and in the area\n      from `pos1` to `pos2`.\n    * `pos1` and `pos2` are optional and default to mapchunk minp and maxp.","kind":2,"prefix":"minetest.generate_ores","body":"minetest.generate_ores(${1:vm}, ${2:pos1}, ${3:pos2})"},{"desc":"    * Generate all registered decorations within the VoxelManip `vm` and in the\n      area from `pos1` to `pos2`.\n    * `pos1` and `pos2` are optional and default to mapchunk minp and maxp.","kind":2,"prefix":"minetest.generate_decorations","body":"minetest.generate_decorations(${1:vm}, ${2:pos1}, ${3:pos2})"},{"desc":"    * Clear all objects in the environment\n    * Takes an optional table as an argument with the field `mode`.\n        * mode = `\"full\"` : Load and go through every mapblock, clearing\n                            objects (default).\n        * mode = `\"quick\"`: Clear objects immediately in loaded mapblocks,\n                            clear objects in unloaded mapblocks only when the\n                            mapblocks are next activated.","kind":2,"prefix":"minetest.clear_objects","body":"minetest.clear_objects([${1:options}])"},{"desc":"    * Load the mapblocks containing the area from `pos1` to `pos2`.\n      `pos2` defaults to `pos1` if not specified.\n    * This function does not trigger map generation.","kind":2,"prefix":"minetest.load_area","body":"minetest.load_area(${1:pos1}[, ${2:pos2}])"},{"desc":"    * Queue all blocks in the area from `pos1` to `pos2`, inclusive, to be\n      asynchronously fetched from memory, loaded from disk, or if inexistent,\n      generates them.\n    * If `callback` is a valid Lua function, this will be called for each block\n      emerged.\n    * The function signature of callback is:\n      `function EmergeAreaCallback(blockpos, action, calls_remaining, param)`\n        * `blockpos` is the *block* coordinates of the block that had been\n          emerged.\n        * `action` could be one of the following constant values:\n            * `minetest.EMERGE_CANCELLED`\n            * `minetest.EMERGE_ERRORED`\n            * `minetest.EMERGE_FROM_MEMORY`\n            * `minetest.EMERGE_FROM_DISK`\n            * `minetest.EMERGE_GENERATED`\n        * `calls_remaining` is the number of callbacks to be expected after\n          this one.\n        * `param` is the user-defined parameter passed to emerge_area (or\n          nil if the parameter was absent).","kind":2,"prefix":"minetest.emerge_area","body":"minetest.emerge_area(${1:pos1}, ${2:pos2}, ${3:}[${4:callback}], ${5:}[${6:param}])"},{"desc":"    * delete all mapblocks in the area from pos1 to pos2, inclusive","kind":2,"prefix":"minetest.delete_area","body":"minetest.delete_area(${1:pos1}, ${2:pos2})"},{"desc":"returns `boolean, pos`\n    * Checks if there is anything other than air between pos1 and pos2.\n    * Returns false if something is blocking the sight.\n    * Returns the position of the blocking node when `false`\n    * `pos1`: First position\n    * `pos2`: Second position","kind":2,"prefix":"minetest.line_of_sight","body":"minetest.line_of_sight(${1:pos1}, ${2:pos2})"},{"desc":"returns `Raycast`\n    * Creates a `Raycast` object.\n    * `pos1`: start of the ray\n    * `pos2`: end of the ray\n    * `objects`: if false, only nodes will be returned. Default is `true`.\n    * `liquids`: if false, liquid nodes won't be returned. Default is `false`.","kind":2,"prefix":"minetest.raycast","body":"minetest.raycast(${1:pos1}, ${2:pos2}, ${3:objects}, ${4:liquids})"},{"desc":"    * returns table containing path\n    * returns a table of 3D points representing a path from `pos1` to `pos2` or\n      `nil`.\n    * `pos1`: start position\n    * `pos2`: end position\n    * `searchdistance`: number of blocks to search in each direction using a\n      maximum metric.\n    * `max_jump`: maximum height difference to consider walkable\n    * `max_drop`: maximum height difference to consider droppable\n    * `algorithm`: One of `\"A*_noprefetch\"` (default), `\"A*\"`, `\"Dijkstra\"`","kind":2,"prefix":"minetest.find_path","body":"minetest.find_path(${1:pos1}, ${2:pos2}, ${3:searchdistance}, ${4:max_jump}, ${5:max_drop}, ${6:algorithm})"},{"desc":"    * spawns L-system tree at given `pos` with definition in `treedef` table","kind":2,"prefix":"minetest.spawn_tree ","body":"minetest.spawn_tree (${1:pos}, ${2:}{${3:treedef}})"},{"desc":"    * add node to liquid update queue","kind":2,"prefix":"minetest.transforming_liquid_add","body":"minetest.transforming_liquid_add(${1:pos})"},{"desc":"    * get max available level for leveled node","kind":2,"prefix":"minetest.get_node_max_level","body":"minetest.get_node_max_level(${1:pos})"},{"desc":"    * get level of leveled node (water, snow)","kind":2,"prefix":"minetest.get_node_level","body":"minetest.get_node_level(${1:pos})"},{"desc":"    * set level of leveled node, default `level` equals `1`\n    * if `totallevel > maxlevel`, returns rest (`total-max`).","kind":2,"prefix":"minetest.set_node_level","body":"minetest.set_node_level(${1:pos}, ${2:level})"},{"desc":"    * increase level of leveled node by level, default `level` equals `1`\n    * if `totallevel > maxlevel`, returns rest (`total-max`)\n    * can be negative for decreasing","kind":2,"prefix":"minetest.add_node_level","body":"minetest.add_node_level(${1:pos}, ${2:level})"},{"desc":"returns `true`/`false`\n    * resets the light in a cuboid-shaped part of\n      the map and removes lighting bugs.\n    * Loads the area if it is not loaded.\n    * `pos1` is the corner of the cuboid with the least coordinates\n      (in node coordinates), inclusive.\n    * `pos2` is the opposite corner of the cuboid, inclusive.\n    * The actual updated cuboid might be larger than the specified one,\n      because only whole map blocks can be updated.\n      The actual updated area consists of those map blocks that intersect\n      with the given cuboid.\n    * However, the neighborhood of the updated area might change\n      as well, as light can spread out of the cuboid, also light\n      might be removed.\n    * returns `false` if the area is not fully generated,\n      `true` otherwise","kind":2,"prefix":"minetest.fix_light","body":"minetest.fix_light(${1:pos1}, ${2:pos2})"},{"desc":"    * causes an unsupported `group:falling_node` node to fall and causes an\n      unattached `group:attached_node` node to fall.\n    * does not spread these updates to neighbours.","kind":2,"prefix":"minetest.check_single_for_falling","body":"minetest.check_single_for_falling(${1:pos})"},{"desc":"    * causes an unsupported `group:falling_node` node to fall and causes an\n      unattached `group:attached_node` node to fall.\n    * spread these updates to neighbours and can cause a cascade\n      of nodes to fall.","kind":2,"prefix":"minetest.check_for_falling","body":"minetest.check_for_falling(${1:pos})"},{"desc":"    * Returns a player spawn y co-ordinate for the provided (x, z)\n      co-ordinates, or `nil` for an unsuitable spawn point.\n    * For most mapgens a 'suitable spawn point' is one with y between\n      `water_level` and `water_level + 16`, and in mgv7 well away from rivers,\n      so `nil` will be returned for many (x, z) co-ordinates.\n    * The spawn level returned is for a player spawn in unmodified terrain.\n    * The spawn level is intentionally above terrain level to cope with\n      full-node biome 'dust' nodes.","kind":2,"prefix":"minetest.get_spawn_level","body":"minetest.get_spawn_level(${1:x}, ${2:z})"},{"desc":"    * Server joins channel `channel_name`, and creates it if necessary. You\n      should listen for incoming messages with\n      `minetest.register_on_modchannel_message`","kind":2,"prefix":"minetest.mod_channel_join","body":"minetest.mod_channel_join(${1:channel_name})"},{"desc":"returns\n  an `InvRef`.\n    * `callbacks`: See [Detached inventory callbacks]\n    * `player_name`: Make detached inventory available to one player\n      exclusively, by default they will be sent to every player (even if not\n      used).\n      Note that this parameter is mostly just a workaround and will be removed\n      in future releases.\n    * Creates a detached inventory. If it already exists, it is cleared.","kind":2,"prefix":"minetest.create_detached_inventory","body":"minetest.create_detached_inventory(${1:name}, ${2:callbacks}, ${3:}[${4:player_name}])"},{"desc":"    * Returns a `boolean` indicating whether the removal succeeded.","kind":2,"prefix":"minetest.remove_detached_inventory","body":"minetest.remove_detached_inventory(${1:name})"},{"desc":"  returns left over ItemStack.\n    * See `minetest.item_eat` and `minetest.register_on_item_eat`","kind":2,"prefix":"minetest.do_item_eat","body":"minetest.do_item_eat(${1:hp_change}, ${2:replace_with_item}, ${3:itemstack}, ${4:user}, ${5:pointed_thing})"},{"desc":"    * `playername`: name of player to show formspec\n    * `formname`: name passed to `on_player_receive_fields` callbacks.\n      It should follow the `\"modname:<whatever>\"` naming convention\n    * `formspec`: formspec to display","kind":2,"prefix":"minetest.show_formspec","body":"minetest.show_formspec(${1:playername}, ${2:formname}, ${3:formspec})"},{"desc":"    * `playername`: name of player to close formspec\n    * `formname`: has to exactly match the one given in `show_formspec`, or the\n      formspec will not close.\n    * calling `show_formspec(playername, formname, \"\")` is equal to this\n      expression.\n    * to close a formspec regardless of the formname, call\n      `minetest.close_formspec(playername, \"\")`.\n      **USE THIS ONLY WHEN ABSOLUTELY NECESSARY!**","kind":2,"prefix":"minetest.close_formspec","body":"minetest.close_formspec(${1:playername}, ${2:formname})"},{"desc":"returns a string\n    * escapes the characters \"[\", \"]\", \"\\\", \",\" and \";\", which can not be used\n      in formspecs.","kind":2,"prefix":"minetest.formspec_escape","body":"minetest.formspec_escape(${1:string})"},{"desc":"returns a table\n    * returns e.g. `{type=\"CHG\", row=1, column=2}`\n    * `type` is one of:\n        * `\"INV\"`: no row selected\n        * `\"CHG\"`: selected\n        * `\"DCL\"`: double-click","kind":2,"prefix":"minetest.explode_table_event","body":"minetest.explode_table_event(${1:string})"},{"desc":"returns a table\n    * returns e.g. `{type=\"CHG\", index=1}`\n    * `type` is one of:\n        * `\"INV\"`: no row selected\n        * `\"CHG\"`: selected\n        * `\"DCL\"`: double-click","kind":2,"prefix":"minetest.explode_textlist_event","body":"minetest.explode_textlist_event(${1:string})"},{"desc":"returns a table\n    * returns e.g. `{type=\"CHG\", value=500}`\n    * `type` is one of:\n        * `\"INV\"`: something failed\n        * `\"CHG\"`: has been changed\n        * `\"VAL\"`: not changed","kind":2,"prefix":"minetest.explode_scrollbar_event","body":"minetest.explode_scrollbar_event(${1:string})"},{"desc":"    * Returns a string for making an image of a cube (useful as an item image)","kind":2,"prefix":"minetest.inventorycube","body":"minetest.inventorycube(${1:img1}, ${2:img2}, ${3:img3})"},{"desc":"    * Returns the position of a `pointed_thing` or `nil` if the `pointed_thing`\n      does not refer to a node or entity.\n    * If the optional `above` parameter is true and the `pointed_thing` refers\n      to a node, then it will return the `above` position of the `pointed_thing`.","kind":2,"prefix":"minetest.get_pointed_thing_position","body":"minetest.get_pointed_thing_position(${1:pointed_thing}, ${2:above})"},{"desc":"    * Convert a vector to a facedir value, used in `param2` for\n      `paramtype2=\"facedir\"`.\n    * passing something non-`nil`/`false` for the optional second parameter\n      causes it to take the y component into account.","kind":2,"prefix":"minetest.dir_to_facedir","body":"minetest.dir_to_facedir(${1:dir}, ${2:is6d})"},{"desc":"    * Convert a facedir back into a vector aimed directly out the \"back\" of a\n      node.","kind":2,"prefix":"minetest.facedir_to_dir","body":"minetest.facedir_to_dir(${1:facedir})"},{"desc":"    * Convert a vector to a wallmounted value, used for\n      `paramtype2=\"wallmounted\"`.","kind":2,"prefix":"minetest.dir_to_wallmounted","body":"minetest.dir_to_wallmounted(${1:dir})"},{"desc":"    * Convert a wallmounted value back into a vector aimed directly out the\n      \"back\" of a node.","kind":2,"prefix":"minetest.wallmounted_to_dir","body":"minetest.wallmounted_to_dir(${1:wallmounted})"},{"desc":"    * Convert a vector into a yaw (angle)","kind":2,"prefix":"minetest.dir_to_yaw","body":"minetest.dir_to_yaw(${1:dir})"},{"desc":"    * Convert yaw (angle) to a vector","kind":2,"prefix":"minetest.yaw_to_dir","body":"minetest.yaw_to_dir(${1:yaw})"},{"desc":"    * Returns a boolean. Returns `true` if the given `paramtype2` contains\n      color information (`color`, `colorwallmounted` or `colorfacedir`).","kind":2,"prefix":"minetest.is_colored_paramtype","body":"minetest.is_colored_paramtype(${1:ptype})"},{"desc":"    * Removes everything but the color information from the\n      given `param2` value.\n    * Returns `nil` if the given `paramtype2` does not contain color\n      information.","kind":2,"prefix":"minetest.strip_param2_color","body":"minetest.strip_param2_color(${1:param2}, ${2:paramtype2})"},{"desc":"    * Returns list of item names.\n    * **Note**: This will be removed or modified in a future version.","kind":2,"prefix":"minetest.get_node_drops","body":"minetest.get_node_drops(${1:nodename}, ${2:toolname})"},{"desc":"returns `output, decremented_input`\n    * `input.method` = `\"normal\"` or `\"cooking\"` or `\"fuel\"`\n    * `input.width` = for example `3`\n    * `input.items` = for example\n      `{stack1, stack2, stack3, stack4, stack 5, stack 6, stack 7, stack 8, stack 9}`\n    * `output.item` = `ItemStack`, if unsuccessful: empty `ItemStack`\n    * `output.time` = a number, if unsuccessful: `0`\n    * `output.replacements` = list of `ItemStack`s that couldn't be placed in\n      `decremented_input.items`\n    * `decremented_input` = like `input`","kind":2,"prefix":"minetest.get_craft_result","body":"minetest.get_craft_result(${1:input})"},{"desc":"returns input\n    * returns last registered recipe for output item (node)\n    * `output` is a node or item type such as `\"default:torch\"`\n    * `input.method` = `\"normal\"` or `\"cooking\"` or `\"fuel\"`\n    * `input.width` = for example `3`\n    * `input.items` = for example\n      `{stack1, stack2, stack3, stack4, stack 5, stack 6, stack 7, stack 8, stack 9}`\n        * `input.items` = `nil` if no recipe found","kind":2,"prefix":"minetest.get_craft_recipe","body":"minetest.get_craft_recipe(${1:output})"},{"desc":"returns a table or `nil`\n    * returns indexed table with all registered recipes for query item (node)\n      or `nil` if no recipe was found.\n    * recipe entry table:\n        * `method`: 'normal' or 'cooking' or 'fuel'\n        * `width`: 0-3, 0 means shapeless recipe\n        * `items`: indexed [1-9] table with recipe items\n        * `output`: string with item name and quantity\n    * Example query for `\"default:gold_ingot\"` will return table:","kind":2,"prefix":"minetest.get_all_craft_recipes","body":"minetest.get_all_craft_recipes(${1:query item})"},{"desc":"    * `drops`: list of itemstrings\n    * Handles drops from nodes after digging: Default action is to put them\n      into digger's inventory.\n    * Can be overridden to get different functionality (e.g. dropping items on\n      ground)","kind":2,"prefix":"minetest.handle_node_drops","body":"minetest.handle_node_drops(${1:pos}, ${2:drops}, ${3:digger})"},{"desc":"returns an item\n  string.\n    * Creates an item string which contains palette index information\n      for hardware colorization. You can use the returned string\n      as an output in a craft recipe.\n    * `item`: the item stack which becomes colored. Can be in string,\n      table and native form.\n    * `palette_index`: this index is added to the item stack","kind":2,"prefix":"minetest.itemstring_with_palette","body":"minetest.itemstring_with_palette(${1:item}, ${2:palette_index})"},{"desc":"returns an item string\n    * Creates an item string which contains static color information\n      for hardware colorization. Use this method if you wish to colorize\n      an item that does not own a palette. You can use the returned string\n      as an output in a craft recipe.\n    * `item`: the item stack which becomes colored. Can be in string,\n      table and native form.\n    * `colorstring`: the new color of the item stack","kind":2,"prefix":"minetest.itemstring_with_color","body":"minetest.itemstring_with_color(${1:item}, ${2:colorstring})"},{"desc":"  returns `{{actor, pos, time, oldnode, newnode}, ...}`\n    * Find who has done something to a node, or near a node\n    * `actor`: `\"player:<name>\"`, also `\"liquid\"`.","kind":2,"prefix":"minetest.rollback_get_node_actions","body":"minetest.rollback_get_node_actions(${1:pos}, ${2:range}, ${3:seconds}, ${4:limit})"},{"desc":"returns\n  `boolean, log_messages`.\n    * Revert latest actions of someone\n    * `actor`: `\"player:<name>\"`, also `\"liquid\"`.","kind":2,"prefix":"minetest.rollback_revert_actions_by","body":"minetest.rollback_revert_actions_by(${1:actor}, ${2:seconds})"},{"desc":"    * Calls functions registered by `minetest.register_on_punchnode()`","kind":2,"prefix":"minetest.node_punch","body":"minetest.node_punch(${1:pos}, ${2:node}, ${3:puncher}, ${4:pointed_thing})"},{"desc":"    * Checks if node can be dug, puts item into inventory, removes node\n    * Calls functions registered by `minetest.registered_on_dignodes()`","kind":2,"prefix":"minetest.node_dig","body":"minetest.node_dig(${1:pos}, ${2:node}, ${3:digger})"},{"desc":"returns a handle\n    * `spec` is a `SimpleSoundSpec`\n    * `parameters` is a sound parameter table","kind":2,"prefix":"minetest.sound_play","body":"minetest.sound_play(${1:spec}, ${2:parameters})"},{"desc":"","kind":2,"prefix":"minetest.sound_stop","body":"minetest.sound_stop(${1:handle})"},{"desc":"    * `handle` is a handle returned by `minetest.sound_play`\n    * `step` determines how fast a sound will fade.\n      Negative step will lower the sound volume, positive step will increase\n      the sound volume.\n    * `gain` the target gain for the fade.","kind":2,"prefix":"minetest.sound_fade","body":"minetest.sound_fade(${1:handle}, ${2:step}, ${3:gain})"},{"desc":"    * Call the function `func` after `time` seconds, may be fractional\n    * Optional: Variable number of arguments that are passed to `func`","kind":2,"prefix":"minetest.after","body":"minetest.after(${1:time}, ${2:func}, ${3:}...)"},{"desc":"request for\n  server shutdown. Will display `message` to clients.\n    * `reconnect` == true displays a reconnect button\n    * `delay` adds an optional delay (in seconds) before shutdown.\n      Negative delay cancels the current active shutdown.\n      Zero delay triggers an immediate shutdown.","kind":2,"prefix":"minetest.request_shutdown","body":"minetest.request_shutdown([${1:message}], [${2:reconnect}], [${3:delay}])"},{"desc":"cancel current delayed shutdown","kind":2,"prefix":"minetest.cancel_shutdown_requests","body":"minetest.cancel_shutdown_requests()"},{"desc":"    * Returns the server status string when a player joins or when the command\n      `/status` is called. Returns `nil` or an empty string when the message is\n      disabled.\n    * `joined`: Boolean value, indicates whether the function was called when\n      a player joined.\n    * This function may be overwritten by mods to customize the status message.","kind":2,"prefix":"minetest.get_server_status","body":"minetest.get_server_status(${1:name}, ${2:joined})"},{"desc":"returns the server uptime in seconds","kind":2,"prefix":"minetest.get_server_uptime","body":"minetest.get_server_uptime()"},{"desc":"remove player from database (if they are not\n  connected).\n    * As auth data is not removed, minetest.player_exists will continue to\n      return true. Call the below method as well if you want to remove auth\n      data too.\n    * Returns a code (0: successful, 1: no such player, 2: player is connected)","kind":2,"prefix":"minetest.remove_player","body":"minetest.remove_player(${1:name})"},{"desc":"remove player authentication data\n    * Returns boolean indicating success (false if player nonexistant)","kind":2,"prefix":"minetest.remove_player_auth","body":"minetest.remove_player_auth(${1:name})"},{"desc":"returns the ban list\n  (same as `minetest.get_ban_description(\"\")`).","kind":2,"prefix":"minetest.get_ban_list","body":"minetest.get_ban_list()"},{"desc":"returns ban description (string)","kind":2,"prefix":"minetest.get_ban_description","body":"minetest.get_ban_description(${1:ip_or_name})"},{"desc":"ban a player","kind":2,"prefix":"minetest.ban_player","body":"minetest.ban_player(${1:name})"},{"desc":"unban player or IP address","kind":2,"prefix":"minetest.unban_player_or_ip","body":"minetest.unban_player_or_ip(${1:name})"},{"desc":"disconnect a player with a optional\n  reason.","kind":2,"prefix":"minetest.kick_player","body":"minetest.kick_player(${1:name}, ${2:}[${3:reason}])"},{"desc":"    * Deprecated: `minetest.add_particle(pos, velocity, acceleration,\n      expirationtime, size, collisiondetection, texture, playername)`","kind":2,"prefix":"minetest.add_particle","body":"minetest.add_particle(${1:particle definition})"},{"desc":"    * Add a `ParticleSpawner`, an object that spawns an amount of particles\n      over `time` seconds.\n    * Returns an `id`, and -1 if adding didn't succeed\n    * Deprecated: `minetest.add_particlespawner(amount, time,\n      minpos, maxpos,\n      minvel, maxvel,\n      minacc, maxacc,\n      minexptime, maxexptime,\n      minsize, maxsize,\n      collisiondetection, texture, playername)`","kind":2,"prefix":"minetest.add_particlespawner","body":"minetest.add_particlespawner(${1:particlespawner definition})"},{"desc":"    * Delete `ParticleSpawner` with `id` (return value from\n      `minetest.add_particlespawner`).\n    * If playername is specified, only deletes on the player's client,\n      otherwise on all clients.","kind":2,"prefix":"minetest.delete_particlespawner","body":"minetest.delete_particlespawner(${1:id}, ${2:player})"},{"desc":"    * Create a schematic from the volume of map specified by the box formed by\n      p1 and p2.\n    * Apply the specified probability and per-node force-place to the specified\n      nodes according to the `probability_list`.\n        * `probability_list` is an array of tables containing two fields, `pos`\n          and `prob`.\n            * `pos` is the 3D vector specifying the absolute coordinates of the\n              node being modified,\n            * `prob` is an integer value from `0` to `255` that encodes\n              probability and per-node force-place. Probability has levels\n              0-127, then 128 may be added to encode per-node force-place.\n              For probability stated as 0-255, divide by 2 and round down to\n              get values 0-127, then add 128 to apply per-node force-place.\n            * If there are two or more entries with the same pos value, the\n              last entry is used.\n            * If `pos` is not inside the box formed by `p1` and `p2`, it is\n              ignored.\n            * If `probability_list` equals `nil`, no probabilities are applied.\n    * Apply the specified probability to the specified horizontal slices\n      according to the `slice_prob_list`.\n        * `slice_prob_list` is an array of tables containing two fields, `ypos`\n          and `prob`.\n            * `ypos` indicates the y position of the slice with a probability\n              applied, the lowest slice being `ypos = 0`.\n            * If slice probability list equals `nil`, no slice probabilities\n              are applied.\n    * Saves schematic in the Minetest Schematic format to filename.","kind":2,"prefix":"minetest.create_schematic","body":"minetest.create_schematic(${1:p1}, ${2:p2}, ${3:probability_list}, ${4:filename}, ${5:slice_prob_list})"},{"desc":"    * Place the schematic specified by schematic (see [Schematic specifier]) at\n      `pos`.\n    * `rotation` can equal `\"0\"`, `\"90\"`, `\"180\"`, `\"270\"`, or `\"random\"`.\n    * If the `rotation` parameter is omitted, the schematic is not rotated.\n    * `replacements` = `{[\"old_name\"] = \"convert_to\", ...}`\n    * `force_placement` is a boolean indicating whether nodes other than `air`\n      and `ignore` are replaced by the schematic.\n    * Returns nil if the schematic could not be loaded.\n    * **Warning**: Once you have loaded a schematic from a file, it will be\n      cached. Future calls will always use the cached version and the\n      replacement list defined for it, regardless of whether the file or the\n      replacement list parameter have changed. The only way to load the file\n      anew is to restart the server.\n    * `flags` is a flag field with the available flags:\n        * place_center_x\n        * place_center_y\n        * place_center_z","kind":2,"prefix":"minetest.place_schematic","body":"minetest.place_schematic(${1:pos}, ${2:schematic}, ${3:rotation}, ${4:replacements}, ${5:force_placement}, ${6:flags})"},{"desc":"    * This function is analogous to minetest.place_schematic, but places a\n      schematic onto the specified VoxelManip object `vmanip` instead of the\n      map.\n    * Returns false if any part of the schematic was cut-off due to the\n      VoxelManip not containing the full area required, and true if the whole\n      schematic was able to fit.\n    * Returns nil if the schematic could not be loaded.\n    * After execution, any external copies of the VoxelManip contents are\n      invalidated.\n    * `flags` is a flag field with the available flags:\n        * place_center_x\n        * place_center_y\n        * place_center_z","kind":2,"prefix":"minetest.place_schematic_on_vmanip","body":"minetest.place_schematic_on_vmanip(${1:vmanip}, ${2:pos}, ${3:schematic}, ${4:rotation}, ${5:replacement}, ${6:force_placement}, ${7:flags})"},{"desc":"    * Return the serialized schematic specified by schematic\n      (see [Schematic specifier])\n    * in the `format` of either \"mts\" or \"lua\".\n    * \"mts\" - a string containing the binary MTS data used in the MTS file\n      format.\n    * \"lua\" - a string containing Lua code representing the schematic in table\n      format.\n    * `options` is a table containing the following optional parameters:\n        * If `lua_use_comments` is true and `format` is \"lua\", the Lua code\n          generated will have (X, Z) position comments for every X row\n          generated in the schematic data for easier reading.\n        * If `lua_num_indent_spaces` is a nonzero number and `format` is \"lua\",\n          the Lua code generated will use that number of spaces as indentation\n          instead of a tab character.","kind":2,"prefix":"minetest.serialize_schematic","body":"minetest.serialize_schematic(${1:schematic}, ${2:format}, ${3:options})"},{"desc":"    * Returns a Lua table representing the schematic (see: [Schematic specifier])\n    * `schematic` is the schematic to read (see: [Schematic specifier])\n    * `options` is a table containing the following optional parameters:\n        * `write_yslice_prob`: string value:\n            * `none`: no `write_yslice_prob` table is inserted,\n            * `low`: only probabilities that are not 254 or 255 are written in\n              the `write_ylisce_prob` table,\n            * `all`: write all probabilities to the `write_yslice_prob` table.\n            * The default for this option is `all`.\n            * Any invalid value will be interpreted as `all`.","kind":2,"prefix":"minetest.read_schematic","body":"minetest.read_schematic(${1:schematic}, ${2:options})"},{"desc":"    * returns `HTTPApiTable` containing http functions if the calling mod has\n      been granted access by being listed in the `secure.http_mods` or\n      `secure.trusted_mods` setting, otherwise returns `nil`.\n    * The returned table contains the functions `fetch`, `fetch_async` and\n      `fetch_async_get` described below.\n    * Only works at init time and must be called from the mod's main scope\n      (not from a function).\n    * Function only exists if minetest server was built with cURL support.\n    * **DO NOT ALLOW ANY OTHER MODS TO ACCESS THE RETURNED TABLE, STORE IT IN\n      A LOCAL VARIABLE!**","kind":2,"prefix":"minetest.request_http_api","body":"minetest.request_http_api()"},{"desc":"    * Performs given request asynchronously and calls callback upon completion\n    * callback: `function(HTTPRequestResult res)`\n    * Use this HTTP function if you are unsure, the others are for advanced use","kind":2,"prefix":"HTTPApiTable.fetch","body":"HTTPApiTable.fetch(${1:HTTPRequest req}, ${2:callback})"},{"desc":"returns handle\n    * Performs given request asynchronously and returns handle for\n      `HTTPApiTable.fetch_async_get`","kind":2,"prefix":"HTTPApiTable.fetch_async","body":"HTTPApiTable.fetch_async(${1:HTTPRequest req})"},{"desc":"returns HTTPRequestResult\n    * Return response data for given asynchronous HTTP request","kind":2,"prefix":"HTTPApiTable.fetch_async_get","body":"HTTPApiTable.fetch_async_get(${1:handle})"},{"desc":"    * returns reference to mod private `StorageRef`\n    * must be called during mod load time","kind":2,"prefix":"minetest.get_mod_storage","body":"minetest.get_mod_storage()"},{"desc":"returns list of `ObjectRefs`","kind":2,"prefix":"minetest.get_connected_players","body":"minetest.get_connected_players()"},{"desc":"boolean, whether `obj` is a player","kind":2,"prefix":"minetest.is_player","body":"minetest.is_player(${1:obj})"},{"desc":"boolean, whether player exists\n  (regardless of online status)","kind":2,"prefix":"minetest.player_exists","body":"minetest.player_exists(${1:name})"},{"desc":"    * Replaces definition of a builtin hud element\n    * `name`: `\"breath\"` or `\"health\"`\n    * `hud_definition`: definition to replace builtin definition","kind":2,"prefix":"minetest.hud_replace_builtin","body":"minetest.hud_replace_builtin(${1:name}, ${2:hud_definition})"},{"desc":"    * This function can be overridden by mods to change the join message.","kind":2,"prefix":"minetest.send_join_message","body":"minetest.send_join_message(${1:player_name})"},{"desc":"    * This function can be overridden by mods to change the leave message.","kind":2,"prefix":"minetest.send_leave_message","body":"minetest.send_leave_message(${1:player_name}, ${2:timed_out})"},{"desc":"returns an 48-bit integer\n    * `pos`: table {x=number, y=number, z=number},\n    * Gives a unique hash number for a node position (16+16+16=48bit)","kind":2,"prefix":"minetest.hash_node_position","body":"minetest.hash_node_position(${1:pos})"},{"desc":"returns a position\n    * Inverse transform of `minetest.hash_node_position`","kind":2,"prefix":"minetest.get_position_from_hash","body":"minetest.get_position_from_hash(${1:hash})"},{"desc":"returns a rating\n    * Get rating of a group of an item. (`0` means: not in group)","kind":2,"prefix":"minetest.get_item_group","body":"minetest.get_item_group(${1:name}, ${2:group})"},{"desc":"returns a rating\n    * Deprecated: An alias for the former.","kind":2,"prefix":"minetest.get_node_group","body":"minetest.get_node_group(${1:name}, ${2:group})"},{"desc":"returns a rating\n    * Returns rating of the connect_to_raillike group corresponding to name\n    * If name is not yet the name of a connect_to_raillike group, a new group\n      id is created, with that name.","kind":2,"prefix":"minetest.raillike_group","body":"minetest.raillike_group(${1:name})"},{"desc":"returns an integer\n    * Gets the internal content ID of `name`","kind":2,"prefix":"minetest.get_content_id","body":"minetest.get_content_id(${1:name})"},{"desc":"returns a string\n    * Gets the name of the content with that content ID","kind":2,"prefix":"minetest.get_name_from_content_id","body":"minetest.get_name_from_content_id(${1:content_id})"},{"desc":"returns something\n    * Convert a string containing JSON data into the Lua equivalent\n    * `nullvalue`: returned in place of the JSON null; defaults to `nil`\n    * On success returns a table, a string, a number, a boolean or `nullvalue`\n    * On failure outputs an error message and returns `nil`\n    * Example: `parse_json(\"[10, {\\\"a\\\":false}]\")`, returns `{10, {a = false}}`","kind":2,"prefix":"minetest.parse_json","body":"minetest.parse_json(${1:string}[, ${2:nullvalue}])"},{"desc":"returns a string or `nil` and an error\n  message.\n    * Convert a Lua table into a JSON string\n    * styled: Outputs in a human-readable format if this is set, defaults to\n      false.\n    * Unserializable things like functions and userdata will cause an error.\n    * **Warning**: JSON is more strict than the Lua table format.\n        1. You can only use strings and positive integers of at least one as\n           keys.\n        2. You can not mix string and integer keys.\n           This is due to the fact that JSON has two distinct array and object\n           values.\n    * Example: `write_json({10, {a = false}})`,\n      returns `\"[10, {\\\"a\\\": false}]\"`","kind":2,"prefix":"minetest.write_json","body":"minetest.write_json(${1:data}[, ${2:styled}])"},{"desc":"returns a string\n    * Convert a table containing tables, strings, numbers, booleans and `nil`s\n      into string form readable by `minetest.deserialize`\n    * Example: `serialize({foo='bar'})`, returns `'return { [\"foo\"] = \"bar\" }'`","kind":2,"prefix":"minetest.serialize","body":"minetest.serialize(${1:table})"},{"desc":"returns a table\n    * Convert a string returned by `minetest.deserialize` into a table\n    * `string` is loaded in an empty sandbox environment.\n    * Will load functions, but they cannot access the global environment.\n    * Example: `deserialize('return { [\"foo\"] = \"bar\" }')`,\n      returns `{foo='bar'}`\n    * Example: `deserialize('print(\"foo\")')`, returns `nil`\n      (function call fails), returns\n      `error:[string \"print(\"foo\")\"]:1: attempt to call global 'print' (a nil value)`","kind":2,"prefix":"minetest.deserialize","body":"minetest.deserialize(${1:string})"},{"desc":"returns `compressed_data`\n    * Compress a string of data.\n    * `method` is a string identifying the compression method to be used.\n    * Supported compression methods:\n        * Deflate (zlib): `\"deflate\"`\n    * `...` indicates method-specific arguments. Currently defined arguments\n      are:\n        * Deflate: `level` - Compression level, `0`-`9` or `nil`.","kind":2,"prefix":"minetest.compress","body":"minetest.compress(${1:data}, ${2:method}, ${3:}...)"},{"desc":"returns data\n    * Decompress a string of data (using ZLib).\n    * See documentation on `minetest.compress()` for supported compression\n      methods.\n    * `...` indicates method-specific arguments. Currently, no methods use this","kind":2,"prefix":"minetest.decompress","body":"minetest.decompress(${1:compressed_data}, ${2:method}, ${3:}...)"},{"desc":"returns a string\n    * Each argument is a 8 Bit unsigned integer\n    * Returns the ColorString from rgb or rgba values\n    * Example: `minetest.rgba(10, 20, 30, 40)`, returns `\"#0A141E28\"`","kind":2,"prefix":"minetest.rgba","body":"minetest.rgba(${1:red}, ${2:green}, ${3:blue}[, ${4:alpha}])"},{"desc":"returns string encoded in base64\n    * Encodes a string in base64.","kind":2,"prefix":"minetest.encode_base64","body":"minetest.encode_base64(${1:string})"},{"desc":"returns string\n    * Decodes a string encoded in base64.","kind":2,"prefix":"minetest.decode_base64","body":"minetest.decode_base64(${1:string})"},{"desc":"returns boolean\n    * Returning `true` restricts the player `name` from modifying (i.e. digging,\n       placing) the node at position `pos`.\n    * `name` will be `\"\"` for non-players or unknown players.\n    * This function should be overridden by protection mods. It is highly\n      recommended to grant access to players with the `protection_bypass` privilege.\n    * Cache and call the old version of this function if the position is\n      not protected by the mod. This will allow using multiple protection mods.\n    * Example:","kind":2,"prefix":"minetest.is_protected","body":"minetest.is_protected(${1:pos}, ${2:name})"},{"desc":"    * This function calls functions registered with\n      `minetest.register_on_protection_violation`.","kind":2,"prefix":"minetest.record_protection_violation","body":"minetest.record_protection_violation(${1:pos}, ${2:name})"},{"desc":"    * Returns the position of the first node that `player_name` may not modify\n      in the specified cuboid between `pos1` and `pos2`.\n    * Returns `false` if no protections were found.\n    * Applies `is_protected()` to a 3D lattice of points in the defined volume.\n      The points are spaced evenly throughout the volume and have a spacing\n      similar to, but no larger than, `interval`.\n    * All corners and edges of the defined volume are checked.\n    * `interval` defaults to 4.\n    * `interval` should be carefully chosen and maximised to avoid an excessive\n      number of points being checked.\n    * Like `minetest.is_protected`, this function may be extended or\n      overwritten by mods to provide a faster implementation to check the\n      cuboid for intersections.\n* `minetest.rotate_and_place(itemstack, placer, pointed_thing[, infinitestacks,\n  orient_flags, prevent_after_place])`\n    * Attempt to predict the desired orientation of the facedir-capable node\n      defined by `itemstack`, and place it accordingly (on-wall, on the floor,\n      or hanging from the ceiling).\n    * `infinitestacks`: if `true`, the itemstack is not changed. Otherwise the\n      stacks are handled normally.\n    * `orient_flags`: Optional table containing extra tweaks to the placement code:\n        * `invert_wall`:   if `true`, place wall-orientation on the ground and\n          ground-orientation on the wall.\n        * `force_wall` :   if `true`, always place the node in wall orientation.\n        * `force_ceiling`: if `true`, always place on the ceiling.\n        * `force_floor`:   if `true`, always place the node on the floor.\n        * `force_facedir`: if `true`, forcefully reset the facedir to north\n          when placing on the floor or ceiling.\n        * The first four options are mutually-exclusive; the last in the list\n          takes precedence over the first.\n    * `prevent_after_place` is directly passed to `minetest.item_place_node`\n    * Returns the new itemstack after placement","kind":2,"prefix":"minetest.is_area_protected","body":"minetest.is_area_protected(${1:pos1}, ${2:pos2}, ${3:player_name}, ${4:interval})"},{"desc":"    * calls `rotate_and_place()` with `infinitestacks` set according to the state\n      of the creative mode setting, checks for \"sneak\" to set the `invert_wall`\n      parameter and `prevent_after_place` set to `true`.","kind":2,"prefix":"minetest.rotate_node","body":"minetest.rotate_node(${1:itemstack}, ${2:placer}, ${3:pointed_thing})"},{"desc":"    * forceloads the position `pos`.\n    * returns `true` if area could be forceloaded\n    * If `transient` is `false` or absent, the forceload will be persistent\n      (saved between server runs). If `true`, the forceload will be transient\n      (not saved between server runs).","kind":2,"prefix":"minetest.forceload_block","body":"minetest.forceload_block(${1:pos}[, ${2:transient}])"},{"desc":"    * stops forceloading the position `pos`\n    * If `transient` is `false` or absent, frees a persistent forceload.\n      If `true`, frees a transient forceload.","kind":2,"prefix":"minetest.forceload_free_block","body":"minetest.forceload_free_block(${1:pos}[, ${2:transient}])"},{"desc":"returns an environment containing\n  insecure functions if the calling mod has been listed as trusted in the\n  `secure.trusted_mods` setting or security is disabled, otherwise returns\n  `nil`.\n    * Only works at init time and must be called from the mod's main scope (not\n      from a function).\n    * **DO NOT ALLOW ANY OTHER MODS TO ACCESS THE RETURNED ENVIRONMENT, STORE\n      IT IN A LOCAL VARIABLE!**","kind":2,"prefix":"minetest.request_insecure_environment","body":"minetest.request_insecure_environment()"},{"desc":"    * Checks if a global variable has been set, without triggering a warning.","kind":2,"prefix":"minetest.global_exists","body":"minetest.global_exists(${1:name})"},{"desc":"    * Returns the area information about the specified ID.\n    * Returned values are either of these:","kind":2,"prefix":"get_area","body":"get_area(${1:id}, ${2:include_borders}, ${3:include_data})"},{"desc":"    * Returns all areas as table, indexed by the area ID.\n    * Table values: see `get_area`.","kind":2,"prefix":"get_areas_for_pos","body":"get_areas_for_pos(${1:pos}, ${2:include_borders}, ${3:include_data})"},{"desc":"    * Returns all areas that contain all nodes inside the area specified by `edge1`\n      and `edge2` (inclusive).\n    * `accept_overlap`: if `true`, areas are returned that have nodes in\n      common (intersect) with the specified area.\n    * Returns the same values as `get_areas_for_pos`.","kind":2,"prefix":"get_areas_in_area","body":"get_areas_in_area(${1:edge1}, ${2:edge2}, ${3:accept_overlap}, ${4:include_borders}, ${5:include_data})"},{"desc":"inserts an area into the store.\n    * Returns the new area's ID, or nil if the insertion failed.\n    * The (inclusive) positions `edge1` and `edge2` describe the area.\n    * `data` is a string stored with the area.\n    * `id` (optional): will be used as the internal area ID if it is an unique\n      number between 0 and 2^32-2.","kind":2,"prefix":"insert_area","body":"insert_area(${1:edge1}, ${2:edge2}, ${3:data}, ${4:}[${5:id}])"},{"desc":"reserves resources for at most `count` many contained\n  areas.\n  Only needed for efficiency, and only some implementations profit.","kind":2,"prefix":"reserve","body":"reserve(${1:count})"},{"desc":"removes the area with the given id from the store, returns\n  success.","kind":2,"prefix":"remove_area","body":"remove_area(${1:id})"},{"desc":"sets params for the included prefiltering cache.\n  Calling invalidates the cache, so that its elements have to be newly\n  generated.\n    * `params` is a table with the following fields:","kind":2,"prefix":"set_cache_params","body":"set_cache_params(${1:params})"},{"desc":"Experimental. Returns area store serialized as a (binary)\n  string.","kind":2,"prefix":"to_string","body":"to_string()"},{"desc":"Experimental. Like `to_string()`, but writes the data to\n  a file.","kind":2,"prefix":"to_file","body":"to_file(${1:filename})"},{"desc":"Experimental. Deserializes string and loads it into the\n  AreaStore.\n  Returns success and, optionally, an error message.","kind":2,"prefix":"from_string","body":"from_string(${1:str})"},{"desc":"Experimental. Like `from_string()`, but reads the data\n  from a file.","kind":2,"prefix":"from_file","body":"from_file(${1:filename})"},{"desc":"return `true` if list is empty","kind":2,"prefix":"is_empty","body":"is_empty(${1:listname})"},{"desc":"get size of a list","kind":2,"prefix":"get_size","body":"get_size(${1:listname})"},{"desc":"set size of a list\n    * returns `false` on error (e.g. invalid `listname` or `size`)","kind":2,"prefix":"set_size","body":"set_size(${1:listname}, ${2:size})"},{"desc":"get width of a list","kind":2,"prefix":"get_width","body":"get_width(${1:listname})"},{"desc":"set width of list; currently used for crafting","kind":2,"prefix":"set_width","body":"set_width(${1:listname}, ${2:width})"},{"desc":"get a copy of stack index `i` in list","kind":2,"prefix":"get_stack","body":"get_stack(${1:listname}, ${2:i})"},{"desc":"copy `stack` to index `i` in list","kind":2,"prefix":"set_stack","body":"set_stack(${1:listname}, ${2:i}, ${3:stack})"},{"desc":"return full list","kind":2,"prefix":"get_list","body":"get_list(${1:listname})"},{"desc":"set full list (size will not change)","kind":2,"prefix":"set_list","body":"set_list(${1:listname}, ${2:list})"},{"desc":"returns list of inventory lists","kind":2,"prefix":"get_lists","body":"get_lists()"},{"desc":"sets inventory lists (size will not change)","kind":2,"prefix":"set_lists","body":"set_lists(${1:lists})"},{"desc":"add item somewhere in list, returns leftover\n  `ItemStack`.\n* `room_for_item(listname, stack):` returns `true` if the stack of items\n  can be fully added to the list","kind":2,"prefix":"add_item","body":"add_item(${1:listname}, ${2:stack})"},{"desc":"returns `true` if\n  the stack of items can be fully taken from the list.\n  If `match_meta` is false, only the items' names are compared\n  (default: `false`).","kind":2,"prefix":"contains_item","body":"contains_item(${1:listname}, ${2:stack}, ${3:}[${4:match_meta}])"},{"desc":"take as many items as specified from the\n  list, returns the items that were actually removed (as an `ItemStack`)\n  -- note that any item metadata is ignored, so attempting to remove a specific\n  unique item this way will likely remove the wrong one -- to do that use\n  `set_stack` with an empty `ItemStack`.","kind":2,"prefix":"remove_item","body":"remove_item(${1:listname}, ${2:stack})"},{"desc":"returns a location compatible to\n  `minetest.get_inventory(location)`.\n    * returns `{type=\"undefined\"}` in case location is not known","kind":2,"prefix":"get_location","body":"get_location()"},{"desc":"returns `true` if stack is empty.","kind":2,"prefix":"is_empty","body":"is_empty()"},{"desc":"returns item name (e.g. `\\\"default:stone\\\"`).","kind":2,"prefix":"get_name","body":"get_name()"},{"desc":"returns a boolean indicating whether the item was\n  cleared.","kind":2,"prefix":"set_name","body":"set_name(${1:item_name})"},{"desc":"Returns number of items on the stack.","kind":2,"prefix":"get_count","body":"get_count()"},{"desc":"returns a boolean indicating whether the item was cleared\n    * `count`: number, unsigned 16 bit integer","kind":2,"prefix":"set_count","body":"set_count(${1:count})"},{"desc":"returns tool wear (`0`-`65535`), `0` for non-tools.","kind":2,"prefix":"get_wear","body":"get_wear()"},{"desc":"returns boolean indicating whether item was cleared\n    * `wear`: number, unsigned 16 bit integer","kind":2,"prefix":"set_wear","body":"set_wear(${1:wear})"},{"desc":"returns ItemStackMetaRef. See section for more details","kind":2,"prefix":"get_meta","body":"get_meta()"},{"desc":"(DEPRECATED) Returns metadata (a string attached to an item\n  stack).","kind":2,"prefix":"get_metadata","body":"get_metadata()"},{"desc":"(DEPRECATED) Returns true.","kind":2,"prefix":"set_metadata","body":"set_metadata(${1:metadata})"},{"desc":"returns the description shown in inventory list tooltips.","kind":2,"prefix":"get_description","body":"get_description()"},{"desc":"removes all items from the stack, making it empty.","kind":2,"prefix":"clear","body":"clear()"},{"desc":"replace the contents of this stack.\n    * `item` can also be an itemstring or table.","kind":2,"prefix":"replace","body":"replace(${1:item})"},{"desc":"returns the stack in itemstring form.","kind":2,"prefix":"to_string","body":"to_string()"},{"desc":"returns the stack in Lua table form.","kind":2,"prefix":"to_table","body":"to_table()"},{"desc":"returns the maximum size of the stack (depends on the\n  item).","kind":2,"prefix":"get_stack_max","body":"get_stack_max()"},{"desc":"returns `get_stack_max() - get_count()`.","kind":2,"prefix":"get_free_space","body":"get_free_space()"},{"desc":"returns `true` if the item name refers to a defined item type.","kind":2,"prefix":"is_known","body":"is_known()"},{"desc":"returns the item definition table.","kind":2,"prefix":"get_definition","body":"get_definition()"},{"desc":"returns the digging properties of the item,\n  or those of the hand if none are defined for this item type","kind":2,"prefix":"get_tool_capabilities","body":"get_tool_capabilities()"},{"desc":"    * Increases wear by `amount` if the item is a tool\n    * `amount`: number, integer","kind":2,"prefix":"add_wear","body":"add_wear(${1:amount})"},{"desc":"returns leftover `ItemStack`\n    * Put some item or stack onto this stack","kind":2,"prefix":"add_item","body":"add_item(${1:item})"},{"desc":"returns `true` if item or stack can be fully added to\n  this one.","kind":2,"prefix":"item_fits","body":"item_fits(${1:item})"},{"desc":"returns taken `ItemStack`\n    * Take (and remove) up to `n` items from this stack\n    * `n`: number, default: `1`","kind":2,"prefix":"take_item","body":"take_item(${1:n})"},{"desc":"returns taken `ItemStack`\n    * Copy (don't remove) up to `n` items from this stack\n    * `n`: number, default: `1`","kind":2,"prefix":"peek_item","body":"peek_item(${1:n})"},{"desc":"    * Overrides the item's tool capabilities\n    * A nil value will clear the override data and restore the original\n      behavior.","kind":2,"prefix":"set_tool_capabilities","body":"set_tool_capabilities([${1:tool_capabilities}])"},{"desc":"Returns true if key present, otherwise false.\n    * Returns `nil` when the MetaData is inexistent.","kind":2,"prefix":"contains","body":"contains(${1:key})"},{"desc":"Returns `nil` if key not present, else the stored string.","kind":2,"prefix":"get","body":"get(${1:key})"},{"desc":"Value of `\\\"\\\"` will delete the key.","kind":2,"prefix":"set_string","body":"set_string(${1:key}, ${2:value})"},{"desc":"Returns `\\\"\\\"` if key not present.","kind":2,"prefix":"get_string","body":"get_string(${1:key})"},{"desc":"","kind":2,"prefix":"set_int","body":"set_int(${1:key}, ${2:value})"},{"desc":"Returns `0` if key not present.","kind":2,"prefix":"get_int","body":"get_int(${1:key})"},{"desc":"","kind":2,"prefix":"set_float","body":"set_float(${1:key}, ${2:value})"},{"desc":"Returns `0` if key not present.","kind":2,"prefix":"get_float","body":"get_float(${1:key})"},{"desc":"returns `nil` or a table with keys:\n    * `fields`: key-value storage\n    * `inventory`: `{list1 = {}, ...}}` (NodeMetaRef only)","kind":2,"prefix":"to_table","body":"to_table()"},{"desc":"    * Any non-table value will clear the metadata\n    * See [Node Metadata] for an example\n    * returns `true` on success","kind":2,"prefix":"from_table","body":"from_table(${1:nil or }{})"},{"desc":"    * returns `true` if this metadata has the same key-value pairs as `other`","kind":2,"prefix":"equals","body":"equals(${1:other})"},{"desc":"leave the mod channel.\n    * Server leaves channel `channel_name`.\n    * No more incoming or outgoing messages can be sent to this channel from\n      server mods.\n    * This invalidate all future object usage.\n    * Ensure you set mod_channel to nil after that to free Lua resources.","kind":2,"prefix":"leave","body":"leave()"},{"desc":"returns true if channel is writeable and mod can send over\n  it.","kind":2,"prefix":"is_writeable","body":"is_writeable()"},{"desc":"Send `message` though the mod channel.\n    * If mod channel is not writeable or invalid, message will be dropped.\n    * Message size is limited to 65535 characters by protocol.","kind":2,"prefix":"send_all","body":"send_all(${1:message})"},{"desc":"returns `InvRef`","kind":2,"prefix":"get_inventory","body":"get_inventory()"},{"desc":"Mark specific vars as private\n  This will prevent them from being sent to the client. Note that the \"private\"\n  status will only be remembered if an associated key-value pair exists,\n  meaning it's best to call this when initializing all other meta (e.g.\n  `on_construct`).","kind":2,"prefix":"mark_as_private","body":"mark_as_private(${1:name or }{${2:name1}, ${3:name2}, ${4:}...})"},{"desc":"    * set a timer's state\n    * `timeout` is in seconds, and supports fractional values (0.1 etc)\n    * `elapsed` is in seconds, and supports fractional values (0.1 etc)\n    * will trigger the node's `on_timer` function after `(timeout - elapsed)`\n      seconds.","kind":2,"prefix":"set","body":"set(${1:timeout}, ${2:elapsed})"},{"desc":"    * start a timer\n    * equivalent to `set(timeout,0)`","kind":2,"prefix":"start","body":"start(${1:timeout})"},{"desc":"    * stops the timer","kind":2,"prefix":"stop","body":"stop()"},{"desc":"returns current timeout in seconds\n    * if `timeout` equals `0`, timer is inactive","kind":2,"prefix":"get_timeout","body":"get_timeout()"},{"desc":"returns current elapsed time in seconds\n    * the node's `on_timer` function will be called after `(timeout - elapsed)`\n      seconds.","kind":2,"prefix":"get_elapsed","body":"get_elapsed()"},{"desc":"returns boolean state of timer\n    * returns `true` if timer is started, otherwise `false`","kind":2,"prefix":"is_started","body":"is_started()"},{"desc":"returns `{x=num, y=num, z=num}`","kind":2,"prefix":"get_pos","body":"get_pos()"},{"desc":"`pos`=`{x=num, y=num, z=num}`","kind":2,"prefix":"set_pos","body":"set_pos(${1:pos})"},{"desc":"    * Does an interpolated move for Lua entities for visually smooth transitions.\n    * If `continuous` is true, the Lua entity will not be moved to the current\n      position before starting the interpolated move.\n    * For players this does the same as `set_pos`,`continuous` is ignored.","kind":2,"prefix":"move_to","body":"move_to(${1:pos}, ${2:continuous}=${3:false})"},{"desc":"    * `puncher` = another `ObjectRef`,\n    * `time_from_last_punch` = time since last punch action of the puncher\n    * `direction`: can be `nil`","kind":2,"prefix":"punch","body":"punch(${1:puncher}, ${2:time_from_last_punch}, ${3:tool_capabilities}, ${4:direction})"},{"desc":"is another `ObjectRef`","kind":2,"prefix":"right_click","body":"right_click(${1:clicker})"},{"desc":"returns number of hitpoints (2 * number of hearts)","kind":2,"prefix":"get_hp","body":"get_hp()"},{"desc":"set number of hitpoints (2 * number of hearts).\n    * See reason in register_on_player_hpchange","kind":2,"prefix":"set_hp","body":"set_hp(${1:hp}, ${2:reason})"},{"desc":"returns an `InvRef` for players, otherwise returns `nil`","kind":2,"prefix":"get_inventory","body":"get_inventory()"},{"desc":"returns the name of the inventory list the wielded item\n   is in.","kind":2,"prefix":"get_wield_list","body":"get_wield_list()"},{"desc":"returns the index of the wielded item","kind":2,"prefix":"get_wield_index","body":"get_wield_index()"},{"desc":"returns an `ItemStack`","kind":2,"prefix":"get_wielded_item","body":"get_wielded_item()"},{"desc":"replaces the wielded item, returns `true` if\n  successful.","kind":2,"prefix":"set_wielded_item","body":"set_wielded_item(${1:item})"},{"desc":"","kind":2,"prefix":"set_armor_groups","body":"set_armor_groups({${1:group1}=${2:rating}, ${3:group2}=${4:rating}, ${5:}...})"},{"desc":"returns a table with the armor group ratings","kind":2,"prefix":"get_armor_groups","body":"get_armor_groups()"},{"desc":"    * `frame_range`: table {x=num, y=num}, default: `{x=1, y=1}`\n    * `frame_speed`: number, default: `15.0`\n    * `frame_blend`: number, default: `0.0`\n    * `frame_loop`: boolean, default: `true`","kind":2,"prefix":"set_animation","body":"set_animation(${1:frame_range}, ${2:frame_speed}, ${3:frame_blend}, ${4:frame_loop})"},{"desc":"returns `range`, `frame_speed`, `frame_blend` and\n  `frame_loop`.","kind":2,"prefix":"get_animation","body":"get_animation()"},{"desc":"    * `frame_speed`: number, default: `15.0`","kind":2,"prefix":"set_animation_frame_speed","body":"set_animation_frame_speed(${1:frame_speed})"},{"desc":"    * `bone`: string\n    * `position`: `{x=num, y=num, z=num}` (relative)\n    * `rotation`: `{x=num, y=num, z=num}` = Rotation on each axis, in degrees","kind":2,"prefix":"set_attach","body":"set_attach(${1:parent}, ${2:bone}, ${3:position}, ${4:rotation})"},{"desc":"returns parent, bone, position, rotation or nil if it isn't\n  attached.","kind":2,"prefix":"get_attach","body":"get_attach()"},{"desc":"","kind":2,"prefix":"set_detach","body":"set_detach()"},{"desc":"    * `bone`: string\n    * `position`: `{x=num, y=num, z=num}` (relative)\n    * `rotation`: `{x=num, y=num, z=num}`","kind":2,"prefix":"set_bone_position","body":"set_bone_position(${1:bone}, ${2:position}, ${3:rotation})"},{"desc":"returns position and rotation of the bone","kind":2,"prefix":"get_bone_position","body":"get_bone_position(${1:bone})"},{"desc":"","kind":2,"prefix":"set_properties","body":"set_properties(${1:object property table})"},{"desc":"returns object property table","kind":2,"prefix":"get_properties","body":"get_properties()"},{"desc":"returns true for players, false otherwise","kind":2,"prefix":"is_player","body":"is_player()"},{"desc":"    * returns a table with the attributes of the nametag of an object\n    * {\n        color = {a=0..255, r=0..255, g=0..255, b=0..255},\n        text = \"\",\n      }","kind":2,"prefix":"get_nametag_attributes","body":"get_nametag_attributes()"},{"desc":"    * sets the attributes of the nametag of an object\n    * `attributes`:\n      {\n        color = ColorSpec,\n        text = \"My Nametag\",\n      }","kind":2,"prefix":"set_nametag_attributes","body":"set_nametag_attributes(${1:attributes})"},{"desc":"remove object (after returning from Lua)","kind":2,"prefix":"remove","body":"remove()"},{"desc":"    * `vel` is a vector, e.g. `{x=0.0, y=2.3, z=1.0}`","kind":2,"prefix":"set_velocity","body":"set_velocity(${1:vel})"},{"desc":"    * `vel` is a vector, e.g. `{x=0.0, y=2.3, z=1.0}`\n    * In comparison to using get_velocity, adding the velocity and then using\n      set_velocity, add_velocity is supposed to avoid synchronization problems.","kind":2,"prefix":"add_velocity","body":"add_velocity(${1:vel})"},{"desc":"returns the velocity, a vector","kind":2,"prefix":"get_velocity","body":"get_velocity()"},{"desc":"    * `acc` is a vector","kind":2,"prefix":"set_acceleration","body":"set_acceleration(${1:acc})"},{"desc":"returns the acceleration, a vector","kind":2,"prefix":"get_acceleration","body":"get_acceleration()"},{"desc":"    * `rot` is a vector (radians). X is pitch (elevation), Y is yaw (heading)\n      and Z is roll (bank).","kind":2,"prefix":"set_rotation","body":"set_rotation(${1:rot})"},{"desc":"returns the rotation, a vector (radians)","kind":2,"prefix":"get_rotation","body":"get_rotation()"},{"desc":"sets the yaw (heading).","kind":2,"prefix":"set_yaw","body":"set_yaw(${1:radians})"},{"desc":"returns number in radians","kind":2,"prefix":"get_yaw","body":"get_yaw()"},{"desc":"","kind":2,"prefix":"set_texture_mod","body":"set_texture_mod(${1:mod})"},{"desc":"returns current texture modifier","kind":2,"prefix":"get_texture_mod","body":"get_texture_mod()"},{"desc":"    * Select sprite from spritesheet with optional animation and Dungeon Master\n      style texture selection based on yaw relative to camera\n    * `p`: {x=number, y=number}, the coordinate of the first frame\n      (x: column, y: row), default: `{x=0, y=0}`\n    * `num_frames`: number, default: `1`\n    * `framelength`: number, default: `0.2`\n    * `select_horiz_by_yawpitch`: boolean, this was once used for the Dungeon\n      Master mob, default: `false`","kind":2,"prefix":"set_sprite","body":"set_sprite(${1:p}, ${2:num_frames}, ${3:framelength}, ${4:select_horiz_by_yawpitch})"},{"desc":"(**Deprecated**: Will be removed in a future version)","kind":2,"prefix":"get_entity_name","body":"get_entity_name()"},{"desc":"","kind":2,"prefix":"get_luaentity","body":"get_luaentity()"},{"desc":"returns `\\\"\\\"` if is not a player","kind":2,"prefix":"get_player_name","body":"get_player_name()"},{"desc":"returns `nil` if is not a player, otherwise a\n  table {x, y, z} representing the player's instantaneous velocity in nodes/s","kind":2,"prefix":"get_player_velocity","body":"get_player_velocity()"},{"desc":"    * Adds to player velocity, this happens client-side and only once.\n    * Does not apply during free_move.\n    * Note that since the player speed is normalized at each move step,\n      increasing e.g. Y velocity beyond what would usually be achieved\n      (see: physics overrides) will cause existing X/Z velocity to be reduced.\n    * Example: `add_player_velocity({x=0, y=6.5, z=0})` is equivalent to\n      pressing the jump key (assuming default settings)","kind":2,"prefix":"add_player_velocity","body":"add_player_velocity(${1:vel})"},{"desc":"get camera direction as a unit vector","kind":2,"prefix":"get_look_dir","body":"get_look_dir()"},{"desc":"pitch in radians\n    * Angle ranges between -pi/2 and pi/2, which are straight up and down\n      respectively.","kind":2,"prefix":"get_look_vertical","body":"get_look_vertical()"},{"desc":"yaw in radians\n    * Angle is counter-clockwise from the +z direction.","kind":2,"prefix":"get_look_horizontal","body":"get_look_horizontal()"},{"desc":"sets look pitch\n    * radians: Angle from looking forward, where positive is downwards.","kind":2,"prefix":"set_look_vertical","body":"set_look_vertical(${1:radians})"},{"desc":"sets look yaw\n    * radians: Angle from the +z direction, where positive is counter-clockwise.","kind":2,"prefix":"set_look_horizontal","body":"set_look_horizontal(${1:radians})"},{"desc":"pitch in radians - Deprecated as broken. Use\n  `get_look_vertical`.\n    * Angle ranges between -pi/2 and pi/2, which are straight down and up\n      respectively.","kind":2,"prefix":"get_look_pitch","body":"get_look_pitch()"},{"desc":"yaw in radians - Deprecated as broken. Use\n  `get_look_horizontal`.\n    * Angle is counter-clockwise from the +x direction.","kind":2,"prefix":"get_look_yaw","body":"get_look_yaw()"},{"desc":"sets look pitch - Deprecated. Use\n  `set_look_vertical`.","kind":2,"prefix":"set_look_pitch","body":"set_look_pitch(${1:radians})"},{"desc":"sets look yaw - Deprecated. Use\n  `set_look_horizontal`.","kind":2,"prefix":"set_look_yaw","body":"set_look_yaw(${1:radians})"},{"desc":"returns player's breath","kind":2,"prefix":"get_breath","body":"get_breath()"},{"desc":"sets player's breath\n    * values:\n        * `0`: player is drowning\n        * max: bubbles bar is not shown\n        * See [Object properties] for more information","kind":2,"prefix":"set_breath","body":"set_breath(${1:value})"},{"desc":"Sets player's FOV\n    * `fov`: FOV value.\n    * `is_multiplier`: Set to `true` if the FOV value is a multiplier.\n      Defaults to `false`.\n    * Set to 0 to clear FOV override.","kind":2,"prefix":"set_fov","body":"set_fov(${1:fov}, ${2:is_multiplier})"},{"desc":"    * Returns player's FOV override in degrees, and a boolean depending on whether\n      the value is a multiplier.\n    * Returns 0 as first value if player's FOV hasn't been overridden.","kind":2,"prefix":"get_fov","body":"get_fov()"},{"desc":" DEPRECATED, use get_meta() instead\n    * Sets an extra attribute with value on player.\n    * `value` must be a string, or a number which will be converted to a\n      string.\n    * If `value` is `nil`, remove attribute from player.","kind":2,"prefix":"set_attribute","body":"set_attribute(${1:attribute}, ${2:value})"},{"desc":" DEPRECATED, use get_meta() instead\n    * Returns value (a string) for extra attribute.\n    * Returns `nil` if no attribute found.","kind":2,"prefix":"get_attribute","body":"get_attribute(${1:attribute})"},{"desc":"Returns a PlayerMetaRef.","kind":2,"prefix":"get_meta","body":"get_meta()"},{"desc":"    * Redefine player's inventory form\n    * Should usually be called in `on_joinplayer`","kind":2,"prefix":"set_inventory_formspec","body":"set_inventory_formspec(${1:formspec})"},{"desc":"returns a formspec string","kind":2,"prefix":"get_inventory_formspec","body":"get_inventory_formspec()"},{"desc":"    * the formspec string will be added to every formspec shown to the user,\n      except for those with a no_prepend[] tag.\n    * This should be used to set style elements such as background[] and\n      bgcolor[], any non-style elements (eg: label) may result in weird behaviour.\n    * Only affects formspecs shown after this is called.","kind":2,"prefix":"set_formspec_prepend","body":"set_formspec_prepend(${1:formspec})"},{"desc":"returns a formspec string.","kind":2,"prefix":"get_formspec_prepend","body":"get_formspec_prepend(${1:formspec})"},{"desc":"returns table with player pressed keys\n    * The table consists of fields with boolean value representing the pressed\n      keys, the fields are jump, right, left, LMB, RMB, sneak, aux1, down, up.\n    * example: `{jump=false, right=true, left=false, LMB=false, RMB=false,\n      sneak=true, aux1=false, down=false, up=false}`","kind":2,"prefix":"get_player_control","body":"get_player_control()"},{"desc":"returns integer with bit packed player pressed\n  keys.\n    * bit nr/meaning: 0/up, 1/down, 2/left, 3/right, 4/jump, 5/aux1, 6/sneak,\n      7/LMB, 8/RMB","kind":2,"prefix":"get_player_control_bits","body":"get_player_control_bits()"},{"desc":"    * `override_table` is a table with the following fields:\n        * `speed`: multiplier to default walking speed value (default: `1`)\n        * `jump`: multiplier to default jump value (default: `1`)\n        * `gravity`: multiplier to default gravity value (default: `1`)\n        * `sneak`: whether player can sneak (default: `true`)\n        * `sneak_glitch`: whether player can use the new move code replications\n          of the old sneak side-effects: sneak ladders and 2 node sneak jump\n          (default: `false`)\n        * `new_move`: use new move/sneak code. When `false` the exact old code\n          is used for the specific old sneak behaviour (default: `true`)","kind":2,"prefix":"set_physics_override","body":"set_physics_override(${1:override_table})"},{"desc":"returns the table given to `set_physics_override`","kind":2,"prefix":"get_physics_override","body":"get_physics_override()"},{"desc":"add a HUD element described by HUD def, returns ID\n   number on success","kind":2,"prefix":"hud_add","body":"hud_add(${1:hud definition})"},{"desc":"remove the HUD element of the specified id","kind":2,"prefix":"hud_remove","body":"hud_remove(${1:id})"},{"desc":"change a value of a previously added HUD\n  element.\n    * element `stat` values:\n      `position`, `name`, `scale`, `text`, `number`, `item`, `dir`","kind":2,"prefix":"hud_change","body":"hud_change(${1:id}, ${2:stat}, ${3:value})"},{"desc":"gets the HUD element definition structure of the specified ID","kind":2,"prefix":"hud_get","body":"hud_get(${1:id})"},{"desc":"sets specified HUD flags of player.\n    * `flags`: A table with the following fields set to boolean values\n        * hotbar\n        * healthbar\n        * crosshair\n        * wielditem\n        * breathbar\n        * minimap\n        * minimap_radar\n    * If a flag equals `nil`, the flag is not modified\n    * `minimap`: Modifies the client's permission to view the minimap.\n      The client may locally elect to not view the minimap.\n    * `minimap_radar` is only usable when `minimap` is true","kind":2,"prefix":"hud_set_flags","body":"hud_set_flags(${1:flags})"},{"desc":"returns a table of player HUD flags with boolean values.\n    * See `hud_set_flags` for a list of flags that can be toggled.","kind":2,"prefix":"hud_get_flags","body":"hud_get_flags()"},{"desc":"sets number of items in builtin hotbar\n    * `count`: number of items, must be between `1` and `32`\n* `hud_get_hotbar_itemcount`: returns number of visible items","kind":2,"prefix":"hud_set_hotbar_itemcount","body":"hud_set_hotbar_itemcount(${1:count})"},{"desc":"    * sets background image for hotbar\n* `hud_get_hotbar_image`: returns texturename","kind":2,"prefix":"hud_set_hotbar_image","body":"hud_set_hotbar_image(${1:texturename})"},{"desc":"    * sets image for selected item of hotbar\n* `hud_get_hotbar_selected_image`: returns texturename","kind":2,"prefix":"hud_set_hotbar_selected_image","body":"hud_set_hotbar_selected_image(${1:texturename})"},{"desc":"    * `bgcolor`: ColorSpec, defaults to white\n    * `type`: Available types:\n        * `\"regular\"`: Uses 0 textures, `bgcolor` ignored\n        * `\"skybox\"`: Uses 6 textures, `bgcolor` used\n        * `\"plain\"`: Uses 0 textures, `bgcolor` used\n    * `clouds`: Boolean for whether clouds appear in front of `\"skybox\"` or\n      `\"plain\"` custom skyboxes (default: `true`)","kind":2,"prefix":"set_sky","body":"set_sky(${1:bgcolor}, ${2:type}, ${3:}{${4:texture names}}, ${5:clouds})"},{"desc":"returns bgcolor, type, table of textures, clouds","kind":2,"prefix":"get_sky","body":"get_sky()"},{"desc":"set cloud parameters\n    * `parameters` is a table with the following optional fields:\n        * `density`: from `0` (no clouds) to `1` (full clouds) (default `0.4`)\n        * `color`: basic cloud color with alpha channel, ColorSpec\n          (default `#fff0f0e5`).\n        * `ambient`: cloud color lower bound, use for a \"glow at night\" effect.\n          ColorSpec (alpha ignored, default `#000000`)\n        * `height`: cloud height, i.e. y of cloud base (default per conf,\n          usually `120`)\n        * `thickness`: cloud thickness in nodes (default `16`)\n        * `speed`: 2D cloud speed + direction in nodes per second\n          (default `{x=0, z=-2}`).","kind":2,"prefix":"set_clouds","body":"set_clouds(${1:parameters})"},{"desc":"returns a table with the current cloud parameters as in\n  `set_clouds`.","kind":2,"prefix":"get_clouds","body":"get_clouds()"},{"desc":"    * `0`...`1`: Overrides day-night ratio, controlling sunlight to a specific\n      amount.\n    * `nil`: Disables override, defaulting to sunlight based on day-night cycle","kind":2,"prefix":"override_day_night_ratio","body":"override_day_night_ratio(${1:ratio or nil})"},{"desc":"returns the ratio or nil if it isn't overridden","kind":2,"prefix":"get_day_night_ratio","body":"get_day_night_ratio()"},{"desc":"  set animation for player model in third person view","kind":2,"prefix":"set_local_animation","body":"set_local_animation(${1:stand}/${2:idle}, ${3:walk}, ${4:dig}, ${5:walk}+${6:dig}, ${7:frame_speed}=${8:frame_speed})"},{"desc":"returns stand, walk, dig, dig+walk tables and\n  `frame_speed`.","kind":2,"prefix":"get_local_animation","body":"get_local_animation()"},{"desc":"defines offset value for\n  camera per player.\n    * in first person view\n    * in third person view (max. values `{x=-10/10,y=-10,15,z=-5/5}`)","kind":2,"prefix":"set_eye_offset","body":"set_eye_offset({${1:x}=${2:0}, ${3:y}=${4:0}, ${5:z}=${6:0}}, {${7:x}=${8:0}, ${9:y}=${10:0}, ${11:z}=${12:0}})"},{"desc":"returns `offset_first` and `offset_third`","kind":2,"prefix":"get_eye_offset","body":"get_eye_offset()"},{"desc":"    * Sends a server-side loaded mapblock to the player.\n    * Returns `false` if failed.\n    * Resource intensive - use sparsely\n    * To get blockpos, integer divide pos by 16","kind":2,"prefix":"send_mapblock","body":"send_mapblock(${1:blockpos})"},{"desc":"return next integer random number [`-2147483648`...`2147483647`]","kind":2,"prefix":"next","body":"next()"},{"desc":"return next integer random number [`min`...`max`]","kind":2,"prefix":"next","body":"next(${1:min}, ${2:max})"},{"desc":"return normally distributed\n  random number [`min`...`max`].\n    * This is only a rough approximation of a normal distribution with:\n    * `mean = (max - min) / 2`, and\n    * `variance = (((max - min + 1) ^ 2) - 1) / (12 * num_trials)`\n    * Increasing `num_trials` improves accuracy of the approximation","kind":2,"prefix":"rand_normal_dist","body":"rand_normal_dist(${1:min}, ${2:max}, ${3:num_trials}=${4:6})"},{"desc":"returns 2D noise value at `pos={x=,y=}`","kind":2,"prefix":"get_2d","body":"get_2d(${1:pos})"},{"desc":"returns 3D noise value at `pos={x=,y=,z=}`","kind":2,"prefix":"get_3d","body":"get_3d(${1:pos})"},{"desc":"returns a `<size.x>` times `<size.y>` 2D array of 2D noise\n  with values starting at `pos={x=,y=}`","kind":2,"prefix":"get_2d_map","body":"get_2d_map(${1:pos})"},{"desc":"returns a `<size.x>` times `<size.y>` times `<size.z>`\n  3D array of 3D noise with values starting at `pos={x=,y=,z=}`.","kind":2,"prefix":"get_3d_map","body":"get_3d_map(${1:pos})"},{"desc":"returns a flat `<size.x * size.y>` element\n  array of 2D noise with values starting at `pos={x=,y=}`","kind":2,"prefix":"get_2d_map_flat","body":"get_2d_map_flat(${1:pos}, ${2:buffer})"},{"desc":"Same as `get2dMap_flat`, but 3D noise","kind":2,"prefix":"get_3d_map_flat","body":"get_3d_map_flat(${1:pos}, ${2:buffer})"},{"desc":"Calculates the 2d noise map starting at `pos`. The result\n  is stored internally.","kind":2,"prefix":"calc_2d_map","body":"calc_2d_map(${1:pos})"},{"desc":"Calculates the 3d noise map starting at `pos`. The result\n  is stored internally.","kind":2,"prefix":"calc_3d_map","body":"calc_3d_map(${1:pos})"},{"desc":"In the form of an array,\n  returns a slice of the most recently computed noise results. The result slice\n  begins at coordinates `slice_offset` and takes a chunk of `slice_size`.\n  E.g. to grab a 2-slice high horizontal 2d plane of noise starting at buffer\n  offset y = 20:\n  `noisevals = noise:get_map_slice({y=20}, {y=2})`\n  It is important to note that `slice_offset` offset coordinates begin at 1,\n  and are relative to the starting position of the most recently calculated\n  noise.\n  To grab a single vertical column of noise starting at map coordinates\n  x = 1023, y=1000, z = 1000:\n  `noise:calc_3d_map({x=1000, y=1000, z=1000})`\n  `noisevals = noise:get_map_slice({x=24, z=1}, {x=1, z=1})`","kind":2,"prefix":"get_map_slice","body":"get_map_slice(${1:slice_offset}, ${2:slice_size}, ${3:buffer})"},{"desc":"return next integer random number [`0`...`32767`]","kind":2,"prefix":"next","body":"next()"},{"desc":"return next integer random number [`min`...`max`]\n    * `((max - min) == 32767) or ((max-min) <= 6553))` must be true\n      due to the simple implementation making bad distribution otherwise.","kind":2,"prefix":"next","body":"next(${1:min}, ${2:max})"},{"desc":"returns a `pointed_thing` with exact pointing location\n    * Returns the next thing pointed by the ray or nil.","kind":2,"prefix":"next","body":"next()"},{"desc":"return next `count` (default 1, capped at 2048) many\n  random bytes, as a string.","kind":2,"prefix":"next_bytes","body":"next_bytes([${1:count}])"},{"desc":"returns a value","kind":2,"prefix":"get","body":"get(${1:key})"},{"desc":"returns a boolean\n    * `default` is the value returned if `key` is not found.\n    * Returns `nil` if `key` is not found and `default` not specified.","kind":2,"prefix":"get_bool","body":"get_bool(${1:key}, ${2:}[${3:default}])"},{"desc":"returns a NoiseParams table","kind":2,"prefix":"get_np_group","body":"get_np_group(${1:key})"},{"desc":"    * Setting names can't contain whitespace or any of `=\"{}#`.\n    * Setting values can't contain the sequence `\\n\"\"\"`.\n    * Setting names starting with \"secure.\" can't be set on the main settings\n      object (`minetest.settings`).","kind":2,"prefix":"set","body":"set(${1:key}, ${2:value})"},{"desc":"    * See documentation for set() above.","kind":2,"prefix":"set_bool","body":"set_bool(${1:key}, ${2:value})"},{"desc":"    * `value` is a NoiseParams table.\n    * Also, see documentation for set() above.","kind":2,"prefix":"set_np_group","body":"set_np_group(${1:key}, ${2:value})"},{"desc":"returns a boolean (`true` for success)","kind":2,"prefix":"remove","body":"remove(${1:key})"},{"desc":"returns `{key1,...}`","kind":2,"prefix":"get_names","body":"get_names()"},{"desc":"returns a boolean (`true` for success)\n    * Writes changes to file.","kind":2,"prefix":"write","body":"write()"},{"desc":"returns `{[key1]=value1,...}`","kind":2,"prefix":"to_table","body":"to_table()"}]